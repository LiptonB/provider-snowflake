// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ViewInitParameters struct {

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (Boolean) Specifies that the view is secure.
	// Specifies that the view is secure.
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// (Boolean) Overwrites the View if it exists.
	// Overwrites the View if it exists.
	OrReplace *bool `json:"orReplace,omitempty" tf:"or_replace,omitempty"`

	// (String) Specifies the query used to create the view.
	// Specifies the query used to create the view.
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []ViewTagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ViewObservation struct {

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (String) The timestamp at which the view was created.
	// The timestamp at which the view was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) The database in which to create the view. Don't use the | character.
	// The database in which to create the view. Don't use the | character.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies that the view is secure.
	// Specifies that the view is secure.
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// (Boolean) Overwrites the View if it exists.
	// Overwrites the View if it exists.
	OrReplace *bool `json:"orReplace,omitempty" tf:"or_replace,omitempty"`

	// (String) The schema in which to create the view. Don't use the | character.
	// The schema in which to create the view. Don't use the | character.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Specifies the query used to create the view.
	// Specifies the query used to create the view.
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []ViewTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ViewParameters struct {

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	// +kubebuilder:validation:Optional
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (String) The database in which to create the view. Don't use the | character.
	// The database in which to create the view. Don't use the | character.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.Database
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a Database in snowflake to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a Database in snowflake to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// (Boolean) Specifies that the view is secure.
	// Specifies that the view is secure.
	// +kubebuilder:validation:Optional
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// (Boolean) Overwrites the View if it exists.
	// Overwrites the View if it exists.
	// +kubebuilder:validation:Optional
	OrReplace *bool `json:"orReplace,omitempty" tf:"or_replace,omitempty"`

	// (String) The schema in which to create the view. Don't use the | character.
	// The schema in which to create the view. Don't use the | character.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.Schema
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Reference to a Schema in snowflake to populate schema.
	// +kubebuilder:validation:Optional
	SchemaRef *v1.Reference `json:"schemaRef,omitempty" tf:"-"`

	// Selector for a Schema in snowflake to populate schema.
	// +kubebuilder:validation:Optional
	SchemaSelector *v1.Selector `json:"schemaSelector,omitempty" tf:"-"`

	// (String) Specifies the query used to create the view.
	// Specifies the query used to create the view.
	// +kubebuilder:validation:Optional
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	// +kubebuilder:validation:Optional
	Tag []ViewTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ViewTagInitParameters struct {

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ViewTagObservation struct {

	// (String) The database in which to create the view. Don't use the | character.
	// Name of the database that the tag was created in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the view. Don't use the | character.
	// Name of the schema that the tag was created in.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ViewTagParameters struct {

	// (String) The database in which to create the view. Don't use the | character.
	// Name of the database that the tag was created in.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.
	// Tag name, e.g. department.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The schema in which to create the view. Don't use the | character.
	// Name of the schema that the tag was created in.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// ViewSpec defines the desired state of View
type ViewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ViewParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ViewInitParameters `json:"initProvider,omitempty"`
}

// ViewStatus defines the observed state of View.
type ViewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ViewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// View is the Schema for the Views API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type View struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statement) || (has(self.initProvider) && has(self.initProvider.statement))",message="spec.forProvider.statement is a required parameter"
	Spec   ViewSpec   `json:"spec"`
	Status ViewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ViewList contains a list of Views
type ViewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []View `json:"items"`
}

// Repository type metadata.
var (
	View_Kind             = "View"
	View_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: View_Kind}.String()
	View_KindAPIVersion   = View_Kind + "." + CRDGroupVersion.String()
	View_GroupVersionKind = CRDGroupVersion.WithKind(View_Kind)
)

func init() {
	SchemeBuilder.Register(&View{}, &ViewList{})
}
