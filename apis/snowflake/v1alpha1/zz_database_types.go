// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseInitParameters struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	DataRetentionTimeInDays *float64 `json:"dataRetentionTimeInDays,omitempty" tf:"data_retention_time_in_days,omitempty"`

	// (String) Specify a database to create a clone from.
	// Specify a database to create a clone from.
	FromDatabase *string `json:"fromDatabase,omitempty" tf:"from_database,omitempty"`

	// qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	FromReplica *string `json:"fromReplica,omitempty" tf:"from_replica,omitempty"`

	// (Map of String) Specify a provider and a share in this map to create a database from a share.
	// Specify a provider and a share in this map to create a database from a share.
	FromShare map[string]*string `json:"fromShare,omitempty" tf:"from_share,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Max: 1) When set, specifies the configurations for database replication. (see below for nested schema)
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration []ReplicationConfigurationInitParameters `json:"replicationConfiguration,omitempty" tf:"replication_configuration,omitempty"`
}

type DatabaseObservation struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	DataRetentionTimeInDays *float64 `json:"dataRetentionTimeInDays,omitempty" tf:"data_retention_time_in_days,omitempty"`

	// (String) Specify a database to create a clone from.
	// Specify a database to create a clone from.
	FromDatabase *string `json:"fromDatabase,omitempty" tf:"from_database,omitempty"`

	// qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	FromReplica *string `json:"fromReplica,omitempty" tf:"from_replica,omitempty"`

	// (Map of String) Specify a provider and a share in this map to create a database from a share.
	// Specify a provider and a share in this map to create a database from a share.
	FromShare map[string]*string `json:"fromShare,omitempty" tf:"from_share,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Max: 1) When set, specifies the configurations for database replication. (see below for nested schema)
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration []ReplicationConfigurationObservation `json:"replicationConfiguration,omitempty" tf:"replication_configuration,omitempty"`
}

type DatabaseParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
	// +kubebuilder:validation:Optional
	DataRetentionTimeInDays *float64 `json:"dataRetentionTimeInDays,omitempty" tf:"data_retention_time_in_days,omitempty"`

	// (String) Specify a database to create a clone from.
	// Specify a database to create a clone from.
	// +kubebuilder:validation:Optional
	FromDatabase *string `json:"fromDatabase,omitempty" tf:"from_database,omitempty"`

	// qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"
	// +kubebuilder:validation:Optional
	FromReplica *string `json:"fromReplica,omitempty" tf:"from_replica,omitempty"`

	// (Map of String) Specify a provider and a share in this map to create a database from a share.
	// Specify a provider and a share in this map to create a database from a share.
	// +kubebuilder:validation:Optional
	FromShare map[string]*string `json:"fromShare,omitempty" tf:"from_share,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// +kubebuilder:validation:Optional
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Max: 1) When set, specifies the configurations for database replication. (see below for nested schema)
	// When set, specifies the configurations for database replication.
	// +kubebuilder:validation:Optional
	ReplicationConfiguration []ReplicationConfigurationParameters `json:"replicationConfiguration,omitempty" tf:"replication_configuration,omitempty"`
}

type ReplicationConfigurationInitParameters struct {

	// (List of String)
	Accounts []*string `json:"accounts,omitempty" tf:"accounts,omitempty"`

	// (Boolean)
	IgnoreEditionCheck *bool `json:"ignoreEditionCheck,omitempty" tf:"ignore_edition_check,omitempty"`
}

type ReplicationConfigurationObservation struct {

	// (List of String)
	Accounts []*string `json:"accounts,omitempty" tf:"accounts,omitempty"`

	// (Boolean)
	IgnoreEditionCheck *bool `json:"ignoreEditionCheck,omitempty" tf:"ignore_edition_check,omitempty"`
}

type ReplicationConfigurationParameters struct {

	// (List of String)
	// +kubebuilder:validation:Optional
	Accounts []*string `json:"accounts" tf:"accounts,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	IgnoreEditionCheck *bool `json:"ignoreEditionCheck,omitempty" tf:"ignore_edition_check,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatabaseInitParameters `json:"initProvider,omitempty"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Database is the Schema for the Databases API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseSpec   `json:"spec"`
	Status            DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
