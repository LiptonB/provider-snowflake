// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SchemaInitParameters struct {

	// (String) Specifies a comment for the schema.
	// Specifies a comment for the schema.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	DataRetentionDays *float64 `json:"dataRetentionDays,omitempty" tf:"data_retention_days,omitempty"`

	// (Boolean) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	// Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	IsManaged *bool `json:"isManaged,omitempty" tf:"is_managed,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []SchemaTagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SchemaObservation struct {

	// (String) Specifies a comment for the schema.
	// Specifies a comment for the schema.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	DataRetentionDays *float64 `json:"dataRetentionDays,omitempty" tf:"data_retention_days,omitempty"`

	// (String) The database in which to create the schema.
	// The database in which to create the schema.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	// Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	IsManaged *bool `json:"isManaged,omitempty" tf:"is_managed,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []SchemaTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SchemaParameters struct {

	// (String) Specifies a comment for the schema.
	// Specifies a comment for the schema.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Number) Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
	// +kubebuilder:validation:Optional
	DataRetentionDays *float64 `json:"dataRetentionDays,omitempty" tf:"data_retention_days,omitempty"`

	// (String) The database in which to create the schema.
	// The database in which to create the schema.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.Database
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a Database in snowflake to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a Database in snowflake to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// (Boolean) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	// Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
	// +kubebuilder:validation:Optional
	IsManaged *bool `json:"isManaged,omitempty" tf:"is_managed,omitempty"`

	// safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	// +kubebuilder:validation:Optional
	IsTransient *bool `json:"isTransient,omitempty" tf:"is_transient,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	// +kubebuilder:validation:Optional
	Tag []SchemaTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SchemaTagInitParameters struct {

	// (String) Specifies the identifier for the schema; must be unique for the database in which the schema is created.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the schema that the tag was created in.
	// Name of the schema that the tag was created in.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SchemaTagObservation struct {

	// (String) The database in which to create the schema.
	// Name of the database that the tag was created in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the schema; must be unique for the database in which the schema is created.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the schema that the tag was created in.
	// Name of the schema that the tag was created in.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SchemaTagParameters struct {

	// (String) The database in which to create the schema.
	// Name of the database that the tag was created in.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the schema; must be unique for the database in which the schema is created.
	// Tag name, e.g. department.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Name of the schema that the tag was created in.
	// Name of the schema that the tag was created in.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// SchemaSpec defines the desired state of Schema
type SchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SchemaParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SchemaInitParameters `json:"initProvider,omitempty"`
}

// SchemaStatus defines the observed state of Schema.
type SchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Schema is the Schema for the Schemas API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Schema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SchemaSpec   `json:"spec"`
	Status            SchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SchemaList contains a list of Schemas
type SchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Schema `json:"items"`
}

// Repository type metadata.
var (
	Schema_Kind             = "Schema"
	Schema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Schema_Kind}.String()
	Schema_KindAPIVersion   = Schema_Kind + "." + CRDGroupVersion.String()
	Schema_GroupVersionKind = CRDGroupVersion.WithKind(Schema_Kind)
)

func init() {
	SchemeBuilder.Register(&Schema{}, &SchemaList{})
}
