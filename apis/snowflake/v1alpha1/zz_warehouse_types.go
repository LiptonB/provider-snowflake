// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WarehouseInitParameters struct {

	// (Boolean) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	// Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	AutoResume *bool `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// (Number) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	// Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	EnableQueryAcceleration *bool `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (Number) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// (Boolean, Deprecated) Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	// Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	WaitForProvisioning *bool `json:"waitForProvisioning,omitempty" tf:"wait_for_provisioning,omitempty"`

	// Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	// Specifies the size of the virtual warehouse. Larger warehouse sizes 5X-Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// OPTIMIZED warehouse
	// Specifies a STANDARD or SNOWPARK-OPTIMIZED warehouse
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type WarehouseObservation struct {

	// (Boolean) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	// Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	AutoResume *bool `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// (Number) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	// Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	EnableQueryAcceleration *bool `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (Number) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// (Boolean, Deprecated) Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	// Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	WaitForProvisioning *bool `json:"waitForProvisioning,omitempty" tf:"wait_for_provisioning,omitempty"`

	// Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	// Specifies the size of the virtual warehouse. Larger warehouse sizes 5X-Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// OPTIMIZED warehouse
	// Specifies a STANDARD or SNOWPARK-OPTIMIZED warehouse
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type WarehouseParameters struct {

	// (Boolean) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	// Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
	// +kubebuilder:validation:Optional
	AutoResume *bool `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// (Number) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// +kubebuilder:validation:Optional
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	// Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
	// +kubebuilder:validation:Optional
	EnableQueryAcceleration *bool `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// +kubebuilder:validation:Optional
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	// +kubebuilder:validation:Optional
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// +kubebuilder:validation:Optional
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	// +kubebuilder:validation:Optional
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (Number) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// +kubebuilder:validation:Optional
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
	// +kubebuilder:validation:Optional
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.
	// +kubebuilder:validation:Optional
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// +kubebuilder:validation:Optional
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// +kubebuilder:validation:Optional
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// (Boolean, Deprecated) Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	// Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
	// +kubebuilder:validation:Optional
	WaitForProvisioning *bool `json:"waitForProvisioning,omitempty" tf:"wait_for_provisioning,omitempty"`

	// Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	// Specifies the size of the virtual warehouse. Larger warehouse sizes 5X-Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
	// +kubebuilder:validation:Optional
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// OPTIMIZED warehouse
	// Specifies a STANDARD or SNOWPARK-OPTIMIZED warehouse
	// +kubebuilder:validation:Optional
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

// WarehouseSpec defines the desired state of Warehouse
type WarehouseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WarehouseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WarehouseInitParameters `json:"initProvider,omitempty"`
}

// WarehouseStatus defines the observed state of Warehouse.
type WarehouseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WarehouseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Warehouse is the Schema for the Warehouses API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Warehouse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WarehouseSpec   `json:"spec"`
	Status            WarehouseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WarehouseList contains a list of Warehouses
type WarehouseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Warehouse `json:"items"`
}

// Repository type metadata.
var (
	Warehouse_Kind             = "Warehouse"
	Warehouse_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Warehouse_Kind}.String()
	Warehouse_KindAPIVersion   = Warehouse_Kind + "." + CRDGroupVersion.String()
	Warehouse_GroupVersionKind = CRDGroupVersion.WithKind(Warehouse_Kind)
)

func init() {
	SchemeBuilder.Register(&Warehouse{}, &WarehouseList{})
}
