//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.FromDatabase != nil {
		in, out := &in.FromDatabase, &out.FromDatabase
		*out = new(string)
		**out = **in
	}
	if in.FromReplica != nil {
		in, out := &in.FromReplica, &out.FromReplica
		*out = new(string)
		**out = **in
	}
	if in.FromShare != nil {
		in, out := &in.FromShare, &out.FromShare
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationConfiguration != nil {
		in, out := &in.ReplicationConfiguration, &out.ReplicationConfiguration
		*out = make([]ReplicationConfigurationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.FromDatabase != nil {
		in, out := &in.FromDatabase, &out.FromDatabase
		*out = new(string)
		**out = **in
	}
	if in.FromReplica != nil {
		in, out := &in.FromReplica, &out.FromReplica
		*out = new(string)
		**out = **in
	}
	if in.FromShare != nil {
		in, out := &in.FromShare, &out.FromShare
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationConfiguration != nil {
		in, out := &in.ReplicationConfiguration, &out.ReplicationConfiguration
		*out = make([]ReplicationConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.FromDatabase != nil {
		in, out := &in.FromDatabase, &out.FromDatabase
		*out = new(string)
		**out = **in
	}
	if in.FromReplica != nil {
		in, out := &in.FromReplica, &out.FromReplica
		*out = new(string)
		**out = **in
	}
	if in.FromShare != nil {
		in, out := &in.FromShare, &out.FromShare
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationConfiguration != nil {
		in, out := &in.ReplicationConfiguration, &out.ReplicationConfiguration
		*out = make([]ReplicationConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationConfigurationInitParameters) DeepCopyInto(out *ReplicationConfigurationInitParameters) {
	*out = *in
	if in.Accounts != nil {
		in, out := &in.Accounts, &out.Accounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationConfigurationInitParameters.
func (in *ReplicationConfigurationInitParameters) DeepCopy() *ReplicationConfigurationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationConfigurationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationConfigurationObservation) DeepCopyInto(out *ReplicationConfigurationObservation) {
	*out = *in
	if in.Accounts != nil {
		in, out := &in.Accounts, &out.Accounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationConfigurationObservation.
func (in *ReplicationConfigurationObservation) DeepCopy() *ReplicationConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(ReplicationConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationConfigurationParameters) DeepCopyInto(out *ReplicationConfigurationParameters) {
	*out = *in
	if in.Accounts != nil {
		in, out := &in.Accounts, &out.Accounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationConfigurationParameters.
func (in *ReplicationConfigurationParameters) DeepCopy() *ReplicationConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Schema) DeepCopyInto(out *Schema) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Schema.
func (in *Schema) DeepCopy() *Schema {
	if in == nil {
		return nil
	}
	out := new(Schema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Schema) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaInitParameters) DeepCopyInto(out *SchemaInitParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionDays != nil {
		in, out := &in.DataRetentionDays, &out.DataRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.IsManaged != nil {
		in, out := &in.IsManaged, &out.IsManaged
		*out = new(bool)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaInitParameters.
func (in *SchemaInitParameters) DeepCopy() *SchemaInitParameters {
	if in == nil {
		return nil
	}
	out := new(SchemaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaList) DeepCopyInto(out *SchemaList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Schema, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaList.
func (in *SchemaList) DeepCopy() *SchemaList {
	if in == nil {
		return nil
	}
	out := new(SchemaList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SchemaList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaObservation) DeepCopyInto(out *SchemaObservation) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionDays != nil {
		in, out := &in.DataRetentionDays, &out.DataRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsManaged != nil {
		in, out := &in.IsManaged, &out.IsManaged
		*out = new(bool)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaObservation.
func (in *SchemaObservation) DeepCopy() *SchemaObservation {
	if in == nil {
		return nil
	}
	out := new(SchemaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaParameters) DeepCopyInto(out *SchemaParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionDays != nil {
		in, out := &in.DataRetentionDays, &out.DataRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DatabaseRef != nil {
		in, out := &in.DatabaseRef, &out.DatabaseRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseSelector != nil {
		in, out := &in.DatabaseSelector, &out.DatabaseSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.IsManaged != nil {
		in, out := &in.IsManaged, &out.IsManaged
		*out = new(bool)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaParameters.
func (in *SchemaParameters) DeepCopy() *SchemaParameters {
	if in == nil {
		return nil
	}
	out := new(SchemaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaSpec) DeepCopyInto(out *SchemaSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaSpec.
func (in *SchemaSpec) DeepCopy() *SchemaSpec {
	if in == nil {
		return nil
	}
	out := new(SchemaSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaStatus) DeepCopyInto(out *SchemaStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaStatus.
func (in *SchemaStatus) DeepCopy() *SchemaStatus {
	if in == nil {
		return nil
	}
	out := new(SchemaStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagInitParameters) DeepCopyInto(out *TagInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagInitParameters.
func (in *TagInitParameters) DeepCopy() *TagInitParameters {
	if in == nil {
		return nil
	}
	out := new(TagInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagObservation) DeepCopyInto(out *TagObservation) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagObservation.
func (in *TagObservation) DeepCopy() *TagObservation {
	if in == nil {
		return nil
	}
	out := new(TagObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagParameters) DeepCopyInto(out *TagParameters) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagParameters.
func (in *TagParameters) DeepCopy() *TagParameters {
	if in == nil {
		return nil
	}
	out := new(TagParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Warehouse) DeepCopyInto(out *Warehouse) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Warehouse.
func (in *Warehouse) DeepCopy() *Warehouse {
	if in == nil {
		return nil
	}
	out := new(Warehouse)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Warehouse) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseInitParameters) DeepCopyInto(out *WarehouseInitParameters) {
	*out = *in
	if in.AutoResume != nil {
		in, out := &in.AutoResume, &out.AutoResume
		*out = new(bool)
		**out = **in
	}
	if in.AutoSuspend != nil {
		in, out := &in.AutoSuspend, &out.AutoSuspend
		*out = new(float64)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.EnableQueryAcceleration != nil {
		in, out := &in.EnableQueryAcceleration, &out.EnableQueryAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.InitiallySuspended != nil {
		in, out := &in.InitiallySuspended, &out.InitiallySuspended
		*out = new(bool)
		**out = **in
	}
	if in.MaxClusterCount != nil {
		in, out := &in.MaxClusterCount, &out.MaxClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrencyLevel != nil {
		in, out := &in.MaxConcurrencyLevel, &out.MaxConcurrencyLevel
		*out = new(float64)
		**out = **in
	}
	if in.MinClusterCount != nil {
		in, out := &in.MinClusterCount, &out.MinClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.QueryAccelerationMaxScaleFactor != nil {
		in, out := &in.QueryAccelerationMaxScaleFactor, &out.QueryAccelerationMaxScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.ResourceMonitor != nil {
		in, out := &in.ResourceMonitor, &out.ResourceMonitor
		*out = new(string)
		**out = **in
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.StatementQueuedTimeoutInSeconds != nil {
		in, out := &in.StatementQueuedTimeoutInSeconds, &out.StatementQueuedTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.StatementTimeoutInSeconds != nil {
		in, out := &in.StatementTimeoutInSeconds, &out.StatementTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitForProvisioning != nil {
		in, out := &in.WaitForProvisioning, &out.WaitForProvisioning
		*out = new(bool)
		**out = **in
	}
	if in.WarehouseSize != nil {
		in, out := &in.WarehouseSize, &out.WarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.WarehouseType != nil {
		in, out := &in.WarehouseType, &out.WarehouseType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseInitParameters.
func (in *WarehouseInitParameters) DeepCopy() *WarehouseInitParameters {
	if in == nil {
		return nil
	}
	out := new(WarehouseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseList) DeepCopyInto(out *WarehouseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Warehouse, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseList.
func (in *WarehouseList) DeepCopy() *WarehouseList {
	if in == nil {
		return nil
	}
	out := new(WarehouseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WarehouseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseObservation) DeepCopyInto(out *WarehouseObservation) {
	*out = *in
	if in.AutoResume != nil {
		in, out := &in.AutoResume, &out.AutoResume
		*out = new(bool)
		**out = **in
	}
	if in.AutoSuspend != nil {
		in, out := &in.AutoSuspend, &out.AutoSuspend
		*out = new(float64)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.EnableQueryAcceleration != nil {
		in, out := &in.EnableQueryAcceleration, &out.EnableQueryAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InitiallySuspended != nil {
		in, out := &in.InitiallySuspended, &out.InitiallySuspended
		*out = new(bool)
		**out = **in
	}
	if in.MaxClusterCount != nil {
		in, out := &in.MaxClusterCount, &out.MaxClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrencyLevel != nil {
		in, out := &in.MaxConcurrencyLevel, &out.MaxConcurrencyLevel
		*out = new(float64)
		**out = **in
	}
	if in.MinClusterCount != nil {
		in, out := &in.MinClusterCount, &out.MinClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.QueryAccelerationMaxScaleFactor != nil {
		in, out := &in.QueryAccelerationMaxScaleFactor, &out.QueryAccelerationMaxScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.ResourceMonitor != nil {
		in, out := &in.ResourceMonitor, &out.ResourceMonitor
		*out = new(string)
		**out = **in
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.StatementQueuedTimeoutInSeconds != nil {
		in, out := &in.StatementQueuedTimeoutInSeconds, &out.StatementQueuedTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.StatementTimeoutInSeconds != nil {
		in, out := &in.StatementTimeoutInSeconds, &out.StatementTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitForProvisioning != nil {
		in, out := &in.WaitForProvisioning, &out.WaitForProvisioning
		*out = new(bool)
		**out = **in
	}
	if in.WarehouseSize != nil {
		in, out := &in.WarehouseSize, &out.WarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.WarehouseType != nil {
		in, out := &in.WarehouseType, &out.WarehouseType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseObservation.
func (in *WarehouseObservation) DeepCopy() *WarehouseObservation {
	if in == nil {
		return nil
	}
	out := new(WarehouseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseParameters) DeepCopyInto(out *WarehouseParameters) {
	*out = *in
	if in.AutoResume != nil {
		in, out := &in.AutoResume, &out.AutoResume
		*out = new(bool)
		**out = **in
	}
	if in.AutoSuspend != nil {
		in, out := &in.AutoSuspend, &out.AutoSuspend
		*out = new(float64)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.EnableQueryAcceleration != nil {
		in, out := &in.EnableQueryAcceleration, &out.EnableQueryAcceleration
		*out = new(bool)
		**out = **in
	}
	if in.InitiallySuspended != nil {
		in, out := &in.InitiallySuspended, &out.InitiallySuspended
		*out = new(bool)
		**out = **in
	}
	if in.MaxClusterCount != nil {
		in, out := &in.MaxClusterCount, &out.MaxClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrencyLevel != nil {
		in, out := &in.MaxConcurrencyLevel, &out.MaxConcurrencyLevel
		*out = new(float64)
		**out = **in
	}
	if in.MinClusterCount != nil {
		in, out := &in.MinClusterCount, &out.MinClusterCount
		*out = new(float64)
		**out = **in
	}
	if in.QueryAccelerationMaxScaleFactor != nil {
		in, out := &in.QueryAccelerationMaxScaleFactor, &out.QueryAccelerationMaxScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.ResourceMonitor != nil {
		in, out := &in.ResourceMonitor, &out.ResourceMonitor
		*out = new(string)
		**out = **in
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.StatementQueuedTimeoutInSeconds != nil {
		in, out := &in.StatementQueuedTimeoutInSeconds, &out.StatementQueuedTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.StatementTimeoutInSeconds != nil {
		in, out := &in.StatementTimeoutInSeconds, &out.StatementTimeoutInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitForProvisioning != nil {
		in, out := &in.WaitForProvisioning, &out.WaitForProvisioning
		*out = new(bool)
		**out = **in
	}
	if in.WarehouseSize != nil {
		in, out := &in.WarehouseSize, &out.WarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.WarehouseType != nil {
		in, out := &in.WarehouseType, &out.WarehouseType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseParameters.
func (in *WarehouseParameters) DeepCopy() *WarehouseParameters {
	if in == nil {
		return nil
	}
	out := new(WarehouseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseSpec) DeepCopyInto(out *WarehouseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseSpec.
func (in *WarehouseSpec) DeepCopy() *WarehouseSpec {
	if in == nil {
		return nil
	}
	out := new(WarehouseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WarehouseStatus) DeepCopyInto(out *WarehouseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WarehouseStatus.
func (in *WarehouseStatus) DeepCopy() *WarehouseStatus {
	if in == nil {
		return nil
	}
	out := new(WarehouseStatus)
	in.DeepCopyInto(out)
	return out
}
