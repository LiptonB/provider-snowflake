// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	DefaultNamespace *string `json:"defaultNamespace,omitempty" tf:"default_namespace,omitempty"`

	// (String) Specifies the role that is active by default for the user’s session upon login.
	// Specifies the role that is active by default for the user’s session upon login.
	DefaultRole *string `json:"defaultRole,omitempty" tf:"default_role,omitempty"`

	// more information can be found in doc
	// Specifies the set of secondary roles that are active for the user’s session upon login. Currently only ["ALL"] value is supported - more information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties)
	DefaultSecondaryRoles []*string `json:"defaultSecondaryRoles,omitempty" tf:"default_secondary_roles,omitempty"`

	// (String) Specifies the virtual warehouse that is active by default for the user’s session upon login.
	// Specifies the virtual warehouse that is active by default for the user’s session upon login.
	DefaultWarehouse *string `json:"defaultWarehouse,omitempty" tf:"default_warehouse,omitempty"`

	// (Boolean)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String) The name users use to log in. If not supplied, snowflake will use name instead.
	// The name users use to log in. If not supplied, snowflake will use name instead.
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (Boolean) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	// Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	MustChangePassword *bool `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// pair authentication. Must be on 1 line without header and trailer.
	// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
	RsaPublicKey *string `json:"rsaPublicKey,omitempty" tf:"rsa_public_key,omitempty"`

	// pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	RsaPublicKey2 *string `json:"rsaPublicKey2,omitempty" tf:"rsa_public_key_2,omitempty"`
}

type UserObservation struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	DefaultNamespace *string `json:"defaultNamespace,omitempty" tf:"default_namespace,omitempty"`

	// (String) Specifies the role that is active by default for the user’s session upon login.
	// Specifies the role that is active by default for the user’s session upon login.
	DefaultRole *string `json:"defaultRole,omitempty" tf:"default_role,omitempty"`

	// more information can be found in doc
	// Specifies the set of secondary roles that are active for the user’s session upon login. Currently only ["ALL"] value is supported - more information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties)
	DefaultSecondaryRoles []*string `json:"defaultSecondaryRoles,omitempty" tf:"default_secondary_roles,omitempty"`

	// (String) Specifies the virtual warehouse that is active by default for the user’s session upon login.
	// Specifies the virtual warehouse that is active by default for the user’s session upon login.
	DefaultWarehouse *string `json:"defaultWarehouse,omitempty" tf:"default_warehouse,omitempty"`

	// (Boolean)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Boolean) Will be true if user as an RSA key set.
	// Will be true if user as an RSA key set.
	HasRsaPublicKey *bool `json:"hasRsaPublicKey,omitempty" tf:"has_rsa_public_key,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name users use to log in. If not supplied, snowflake will use name instead.
	// The name users use to log in. If not supplied, snowflake will use name instead.
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (Boolean) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	// Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	MustChangePassword *bool `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// pair authentication. Must be on 1 line without header and trailer.
	// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
	RsaPublicKey *string `json:"rsaPublicKey,omitempty" tf:"rsa_public_key,omitempty"`

	// pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	RsaPublicKey2 *string `json:"rsaPublicKey2,omitempty" tf:"rsa_public_key_2,omitempty"`
}

type UserParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	// Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
	// +kubebuilder:validation:Optional
	DefaultNamespace *string `json:"defaultNamespace,omitempty" tf:"default_namespace,omitempty"`

	// (String) Specifies the role that is active by default for the user’s session upon login.
	// Specifies the role that is active by default for the user’s session upon login.
	// +kubebuilder:validation:Optional
	DefaultRole *string `json:"defaultRole,omitempty" tf:"default_role,omitempty"`

	// more information can be found in doc
	// Specifies the set of secondary roles that are active for the user’s session upon login. Currently only ["ALL"] value is supported - more information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties)
	// +kubebuilder:validation:Optional
	DefaultSecondaryRoles []*string `json:"defaultSecondaryRoles,omitempty" tf:"default_secondary_roles,omitempty"`

	// (String) Specifies the virtual warehouse that is active by default for the user’s session upon login.
	// Specifies the virtual warehouse that is active by default for the user’s session upon login.
	// +kubebuilder:validation:Optional
	DefaultWarehouse *string `json:"defaultWarehouse,omitempty" tf:"default_warehouse,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String, Sensitive) Name displayed for the user in the Snowflake web interface.
	// Name displayed for the user in the Snowflake web interface.
	// +kubebuilder:validation:Optional
	DisplayNameSecretRef *v1.SecretKeySelector `json:"displayNameSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) Email address for the user.
	// Email address for the user.
	// +kubebuilder:validation:Optional
	EmailSecretRef *v1.SecretKeySelector `json:"emailSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) First name of the user.
	// First name of the user.
	// +kubebuilder:validation:Optional
	FirstNameSecretRef *v1.SecretKeySelector `json:"firstNameSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) Last name of the user.
	// Last name of the user.
	// +kubebuilder:validation:Optional
	LastNameSecretRef *v1.SecretKeySelector `json:"lastNameSecretRef,omitempty" tf:"-"`

	// (String) The name users use to log in. If not supplied, snowflake will use name instead.
	// The name users use to log in. If not supplied, snowflake will use name instead.
	// +kubebuilder:validation:Optional
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (Boolean) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	// Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
	// +kubebuilder:validation:Optional
	MustChangePassword *bool `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// Use carefully. Use carefully.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// pair authentication. Must be on 1 line without header and trailer.
	// Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
	// +kubebuilder:validation:Optional
	RsaPublicKey *string `json:"rsaPublicKey,omitempty" tf:"rsa_public_key,omitempty"`

	// pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	// Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
	// +kubebuilder:validation:Optional
	RsaPublicKey2 *string `json:"rsaPublicKey2,omitempty" tf:"rsa_public_key_2,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
