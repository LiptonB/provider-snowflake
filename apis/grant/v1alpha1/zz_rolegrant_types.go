// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleGrantInitParameters struct {

	// (Boolean) When this is set to true, multiple grants of the same type can be created.
	// When this is set to true, multiple grants of the same type can be created.
	EnableMultipleGrants *bool `json:"enableMultipleGrants,omitempty" tf:"enable_multiple_grants,omitempty"`
}

type RoleGrantObservation struct {

	// (Boolean) When this is set to true, multiple grants of the same type can be created.
	// When this is set to true, multiple grants of the same type can be created.
	EnableMultipleGrants *bool `json:"enableMultipleGrants,omitempty" tf:"enable_multiple_grants,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the role we are granting.
	// The name of the role we are granting.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// (Set of String) Grants role to this specified role.
	// Grants role to this specified role.
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Set of String) Grants role to this specified user.
	// Grants role to this specified user.
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type RoleGrantParameters struct {

	// (Boolean) When this is set to true, multiple grants of the same type can be created.
	// When this is set to true, multiple grants of the same type can be created.
	// +kubebuilder:validation:Optional
	EnableMultipleGrants *bool `json:"enableMultipleGrants,omitempty" tf:"enable_multiple_grants,omitempty"`

	// References to Role in snowflake to populate roles.
	// +kubebuilder:validation:Optional
	MemberRoleRefs []v1.Reference `json:"memberRoleRefs,omitempty" tf:"-"`

	// Selector for a list of Role in snowflake to populate roles.
	// +kubebuilder:validation:Optional
	MemberRoleSelector *v1.Selector `json:"memberRoleSelector,omitempty" tf:"-"`

	// References to User in snowflake to populate users.
	// +kubebuilder:validation:Optional
	MemberUserRefs []v1.Reference `json:"memberUserRefs,omitempty" tf:"-"`

	// Selector for a list of User in snowflake to populate users.
	// +kubebuilder:validation:Optional
	MemberUserSelector *v1.Selector `json:"memberUserSelector,omitempty" tf:"-"`

	// (String) The name of the role we are granting.
	// The name of the role we are granting.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.Role
	// +crossplane:generate:reference:refFieldName=RoleRef
	// +crossplane:generate:reference:selectorFieldName=RoleSelector
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// Reference to a Role in snowflake to populate roleName.
	// +kubebuilder:validation:Optional
	RoleRef *v1.Reference `json:"roleRef,omitempty" tf:"-"`

	// Selector for a Role in snowflake to populate roleName.
	// +kubebuilder:validation:Optional
	RoleSelector *v1.Selector `json:"roleSelector,omitempty" tf:"-"`

	// (Set of String) Grants role to this specified role.
	// Grants role to this specified role.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.Role
	// +crossplane:generate:reference:refFieldName=MemberRoleRefs
	// +crossplane:generate:reference:selectorFieldName=MemberRoleSelector
	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Set of String) Grants role to this specified user.
	// Grants role to this specified user.
	// +crossplane:generate:reference:type=github.com/LiptonB/provider-snowflake/apis/snowflake/v1alpha1.User
	// +crossplane:generate:reference:refFieldName=MemberUserRefs
	// +crossplane:generate:reference:selectorFieldName=MemberUserSelector
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

// RoleGrantSpec defines the desired state of RoleGrant
type RoleGrantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleGrantParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleGrantInitParameters `json:"initProvider,omitempty"`
}

// RoleGrantStatus defines the observed state of RoleGrant.
type RoleGrantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleGrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoleGrant is the Schema for the RoleGrants API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type RoleGrant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleGrantSpec   `json:"spec"`
	Status            RoleGrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleGrantList contains a list of RoleGrants
type RoleGrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleGrant `json:"items"`
}

// Repository type metadata.
var (
	RoleGrant_Kind             = "RoleGrant"
	RoleGrant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleGrant_Kind}.String()
	RoleGrant_KindAPIVersion   = RoleGrant_Kind + "." + CRDGroupVersion.String()
	RoleGrant_GroupVersionKind = CRDGroupVersion.WithKind(RoleGrant_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleGrant{}, &RoleGrantList{})
}
