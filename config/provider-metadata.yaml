name: Snowflake-Labs/snowflake
resources:
    snowflake_account:
        subCategory: ""
        description: The account resource allows you to create and manage Snowflake accounts.
        name: snowflake_account
        title: snowflake_account Resource - terraform-provider-snowflake
        examples:
            - name: ac1
              manifest: |-
                {
                  "admin_name": "John Doe",
                  "admin_password": "Abcd1234!",
                  "comment": "Snowflake Test Account",
                  "edition": "STANDARD",
                  "email": "john.doe@snowflake.com",
                  "first_name": "John",
                  "last_name": "Doe",
                  "must_change_password": true,
                  "name": "SNOWFLAKE_TEST_ACCOUNT",
                  "provider": "${snowflake.orgadmin}",
                  "region": "AWS_US_WEST_2"
                }
              references:
                provider: snowflake.orgadmin
        argumentDocs:
            admin_name: (String) Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive.
            admin_password: (String, Sensitive) Password for the initial administrative user of the account. Optional if the ADMIN_RSA_PUBLIC_KEY parameter is specified. For more information about passwords in Snowflake, see Snowflake-provided Password Policy.
            admin_rsa_public_key: (String, Sensitive) Assigns a public key to the initial administrative user of the account in order to implement key pair authentication for the user. Optional if the ADMIN_PASSWORD parameter is specified.
            comment: (String) Specifies a comment for the account.
            edition: '(String) Snowflake Edition of the account. Valid values are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL'
            email: (String, Sensitive) Email address of the initial administrative user of the account. This email address is used to send any notifications about the account.
            first_name: (String, Sensitive) First name of the initial administrative user of the account
            grace_period_in_days: (Number) Specifies the number of days to wait before dropping the account. The default is 3 days.
            id: (String) The ID of this resource.
            is_org_admin: (Boolean) Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.
            last_name: (String, Sensitive) Last name of the initial administrative user of the account
            must_change_password: (Boolean) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account.
            name: (String) Specifies the identifier (i.e. name) for the account; must be unique within an organization, regardless of which Snowflake Region the account is in. In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
            region: (String) ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
            region_group: (String) ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
        importStatements:
            - terraform import snowflake_account.account <account_locator>
    snowflake_account_grant:
        subCategory: ""
        name: snowflake_account_grant
        title: snowflake_account_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "privilege": "CREATE ROLE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The account privilege to grant. Valid privileges are those in globalPrivileges. To grant all privileges, use the value ALL PRIVILEGES.
            roles: (Set of String) Grants privilege to these roles.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is privilege|with_grant_option|roles
              terraform import snowflake_account_grant.example "privilege|false|role1,role2"
    snowflake_account_parameter:
        subCategory: ""
        name: snowflake_account_parameter
        title: snowflake_account_parameter Resource - terraform-provider-snowflake
        examples:
            - name: p
              manifest: |-
                {
                  "key": "ALLOW_ID_TOKEN",
                  "value": "true"
                }
            - name: p2
              manifest: |-
                {
                  "key": "CLIENT_ENCRYPTION_KEY_SIZE",
                  "value": "256"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Name of account parameter. Valid values are those in account parameters.
            value: (String) Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
        importStatements:
            - terraform import snowflake_account_parameter.p <parameter_name>
    snowflake_account_password_policy_attachment:
        subCategory: ""
        description: Specifies the password policy to use for the current account. To set the password policy of a different account, use a provider alias.
        name: snowflake_account_password_policy_attachment
        title: snowflake_account_password_policy_attachment Resource - terraform-provider-snowflake
        examples:
            - name: attachment
              manifest: |-
                {
                  "password_policy": "${snowflake_password_policy.default.qualified_name}"
                }
              references:
                password_policy: snowflake_password_policy.default.qualified_name
              dependencies:
                snowflake_password_policy.default: |-
                    {
                      "database": "prod",
                      "name": "default_policy",
                      "schema": "security"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            password_policy: (String) Qualified name ("db"."schema"."policy_name") of the password policy to apply to the current account.
        importStatements: []
    snowflake_alert:
        subCategory: ""
        name: snowflake_alert
        title: snowflake_alert Resource - terraform-provider-snowflake
        examples:
            - name: alert
              manifest: |-
                {
                  "action": "select 1 as c",
                  "alert_schedule": [
                    {
                      "interval": 10
                    }
                  ],
                  "comment": "my alert",
                  "condition": "select 1 as c",
                  "database": "database",
                  "enabled": true,
                  "name": "alert",
                  "schema": "schema",
                  "warehouse": "warehouse"
                }
        argumentDocs:
            action: (String) The SQL statement that should be executed if the condition returns one or more rows.
            alert_schedule: '(Block List, Max: 1) The schedule for periodically running an alert. (see below for nested schema)'
            comment: (String) Specifies a comment for the alert.
            condition: (String) The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)
            cron: '(Block List, Max: 1) Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday) (see below for nested schema)'
            database: (String) The database in which to create the alert.
            enabled: (Boolean) Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).
            expression: '(String) Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)'
            id: (String) The ID of this resource.
            interval: (Number) Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
            name: (String) Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.
            schema: (String) The schema in which to create the alert.
            time_zone: (String) Specifies the time zone for alert refresh.
            warehouse: (String) The warehouse the alert will use.
        importStatements:
            - |-
              # format is database name | schema name | alert name
              terraform import snowflake_alert.example 'dbName|schemaName|alertName'
    snowflake_api_integration:
        subCategory: ""
        name: snowflake_api_integration
        title: snowflake_api_integration Resource - terraform-provider-snowflake
        examples:
            - name: aws
              manifest: |-
                {
                  "api_allowed_prefixes": [
                    "https://123456.execute-api.us-west-2.amazonaws.com/prod/"
                  ],
                  "api_aws_role_arn": "arn:aws:iam::000000000001:/role/test",
                  "api_provider": "aws_api_gateway",
                  "enabled": true,
                  "name": "aws_integration"
                }
            - name: azure
              manifest: |-
                {
                  "api_allowed_prefixes": [
                    "https://apim-hello-world.azure-api.net/"
                  ],
                  "api_provider": "azure_api_management",
                  "azure_ad_application_id": "11111111-1111-1111-1111-111111111111",
                  "azure_tenant_id": "00000000-0000-0000-0000-000000000000",
                  "enabled": true,
                  "name": "azure_integration"
                }
            - name: gcp
              manifest: |-
                {
                  "api_allowed_prefixes": [
                    "https://gateway-id-123456.uc.gateway.dev/"
                  ],
                  "api_provider": "google_api_gateway",
                  "enabled": true,
                  "google_audience": "api-gateway-id-123456.apigateway.gcp-project.cloud.goog",
                  "name": "gcp_integration"
                }
        argumentDocs:
            api_allowed_prefixes: (List of String) Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.
            api_aws_external_id: (String) The external ID that Snowflake will use when assuming the AWS role.
            api_aws_iam_user_arn: (String) The Snowflake user that will attempt to assume the AWS role.
            api_aws_role_arn: (String) ARN of a cloud platform role.
            api_blocked_prefixes: (List of String) Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.
            api_gcp_service_account: (String) The service account used for communication with the Google API Gateway.
            api_key: (String, Sensitive) The API key (also called a “subscription key”).
            api_provider: (String) Specifies the HTTPS proxy service type.
            azure_ad_application_id: (String) The 'Application (client) id' of the Azure AD app for your remote service.
            azure_consent_url: (String)
            azure_multi_tenant_app_name: (String)
            azure_tenant_id: (String) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.
            comment: (String)
            created_on: (String) Date and time when the API integration was created.
            enabled: (Boolean) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.
            google_audience: (String) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.
            id: (String) The ID of this resource.
            name: (String) Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.
        importStatements:
            - terraform import snowflake_api_integration.example name
    snowflake_database:
        subCategory: ""
        name: snowflake_database
        title: snowflake_database Resource - terraform-provider-snowflake
        examples:
            - name: simple
              manifest: |-
                {
                  "comment": "test comment",
                  "data_retention_time_in_days": 3,
                  "name": "testing"
                }
            - name: with_replication
              manifest: |-
                {
                  "comment": "test comment 2",
                  "name": "testing_2",
                  "replication_configuration": [
                    {
                      "accounts": [
                        "test_account1",
                        "test_account_2"
                      ],
                      "ignore_edition_check": true
                    }
                  ]
                }
            - name: from_replica
              manifest: |-
                {
                  "comment": "test comment",
                  "data_retention_time_in_days": 3,
                  "from_replica": "org1\".\"account1\".\"primary_db_name",
                  "name": "testing_3"
                }
            - name: from_share
              manifest: |-
                {
                  "comment": "test comment",
                  "from_share": {
                    "provider": "org1.account1",
                    "share": "share1"
                  },
                  "name": "testing_4"
                }
        argumentDocs:
            accounts: (List of String)
            comment: (String)
            data_retention_time_in_days: (Number) Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding & Using Time Travel.
            from_database: (String) Specify a database to create a clone from.
            from_replica: '(String) Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of "<organization_name>"."<account_name>"."<db_name>". An example would be: "myorg1"."account1"."db1"'
            from_share: (Map of String) Specify a provider and a share in this map to create a database from a share.
            id: (String) The ID of this resource.
            ignore_edition_check: (Boolean)
            is_transient: (Boolean) Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
            name: (String)
            replication_configuration: '(Block List, Max: 1) When set, specifies the configurations for database replication. (see below for nested schema)'
        importStatements:
            - terraform import snowflake_database.example name
    snowflake_database_grant:
        subCategory: ""
        name: snowflake_database_grant
        title: snowflake_database_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "privilege": "USAGE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the database. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            shares: (Set of String) Grants privilege to these shares.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|privilege|with_grant_option|roles|shares
              terraform import snowflake_database_grant.example "MY_DATABASE|USAGE|false|role1,role2|share1,share2"
    snowflake_database_role:
        subCategory: ""
        name: snowflake_database_role
        title: snowflake_database_role Resource - terraform-provider-snowflake
        examples:
            - name: db_role
              manifest: |-
                {
                  "comment": "my db role",
                  "database": "database",
                  "name": "role_1"
                }
        argumentDocs:
            comment: (String) Specifies a comment for the database role.
            database: (String) The database in which to create the database role.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the database role.
        importStatements:
            - terraform import snowflake_database_role.example 'dbName|roleName'
    snowflake_dynamic_table:
        subCategory: ""
        name: snowflake_dynamic_table
        title: snowflake_dynamic_table Resource - terraform-provider-snowflake
        examples:
            - name: dt
              manifest: |-
                {
                  "comment": "example comment",
                  "database": "mydb",
                  "name": "product",
                  "query": "SELECT product_id, product_name FROM \"mydb\".\"myschema\".\"staging_table\"",
                  "schema": "myschema",
                  "target_lag": [
                    {
                      "maximum_duration": "20 minutes"
                    }
                  ],
                  "warehouse": "mywh"
                }
        argumentDocs:
            automatic_clustering: (Boolean) Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.
            bytes: (Number) Number of bytes that will be scanned if the entire dynamic table is scanned in a query.
            cluster_by: (String) The clustering key for the dynamic table.
            comment: (String) Specifies a comment for the dynamic table.
            data_timestamp: (String) Timestamp of the data in the base object(s) that is included in the dynamic table.
            database: (String) The database in which to create the dynamic table.
            downstream: (Boolean) Specifies whether the target lag time is downstream.
            id: (String) The ID of this resource.
            is_clone: (Boolean) TRUE if the dynamic table has been cloned, else FALSE.
            is_replica: (Boolean) TRUE if the dynamic table is a replica. else FALSE.
            last_suspended_on: (String) Timestamp of last suspension.
            maximum_duration: (String) Specifies the maximum target lag time for the dynamic table.
            name: (String) Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.
            or_replace: (Boolean) Specifies whether to replace the dynamic table if it already exists.
            owner: (String) Role that owns the dynamic table.
            query: (String) Specifies the query to use to populate the dynamic table.
            refresh_mode: (String) INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.
            refresh_mode_reason: (String) Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.
            rows: (Number) Number of rows in the table.
            scheduling_state: (String) Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.
            schema: (String) The schema in which to create the dynamic table.
            target_lag: '(Block List, Min: 1, Max: 1) Specifies the target lag time for the dynamic table. (see below for nested schema)'
            warehouse: (String) The warehouse in which to create the dynamic table.
        importStatements:
            - terraform import snowflake_dynamic_table.dt "mydb|myschema|product"
    snowflake_email_notification_integration:
        subCategory: ""
        name: snowflake_email_notification_integration
        title: snowflake_email_notification_integration Resource - terraform-provider-snowflake
        examples:
            - name: email_int
              manifest: |-
                {
                  "allowed_recipients": [
                    "john.doe@gmail.com"
                  ],
                  "comment": "A notification integration.",
                  "enabled": true,
                  "name": "notification"
                }
        argumentDocs:
            allowed_recipients: (Set of String) List of email addresses that should receive notifications.
            comment: (String) A comment for the email integration.
            enabled: (Boolean)
            id: (String) The ID of this resource.
            name: (String)
        importStatements:
            - terraform import snowflake_email_notification_integration.example name
    snowflake_external_function:
        subCategory: ""
        name: snowflake_external_function
        title: snowflake_external_function Resource - terraform-provider-snowflake
        examples:
            - name: test_ext_func
              manifest: |-
                {
                  "api_integration": "api_integration_name",
                  "arg": [
                    {
                      "name": "arg1",
                      "type": "varchar"
                    },
                    {
                      "name": "arg2",
                      "type": "varchar"
                    }
                  ],
                  "database": "my_test_db",
                  "name": "my_function",
                  "return_behavior": "IMMUTABLE",
                  "return_type": "variant",
                  "schema": "my_test_schema",
                  "url_of_proxy_and_resource": "https://123456.execute-api.us-west-2.amazonaws.com/prod/test_func"
                }
        argumentDocs:
            api_integration: (String) The name of the API integration object that should be used to authenticate the call to the proxy service.
            arg: (Block List) Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects. (see below for nested schema)
            comment: (String) A description of the external function.
            compression: (String) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.
            context_headers: (List of String) Binds Snowflake context function results to HTTP headers.
            created_on: (String) Date and time when the external function was created.
            database: (String) The database in which to create the external function.
            header: (Block Set) Allows users to specify key-value metadata that is sent with every request as HTTP headers. (see below for nested schema)
            id: (String) The ID of this resource.
            max_batch_rows: (Number) This specifies the maximum number of rows in each batch sent to the proxy service.
            name: (String) Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.
            null_input_behavior: (String) Specifies the behavior of the external function when called with null inputs.
            request_translator: (String) This specifies the name of the request translator function
            response_translator: (String) This specifies the name of the response translator function.
            return_behavior: (String) Specifies the behavior of the function when returning results
            return_null_allowed: (Boolean) Indicates whether the function can return NULL values or must return only NON-NULL values.
            return_type: (String) Specifies the data type returned by the external function.
            schema: (String) The schema in which to create the external function.
            type: (String) Argument type, e.g. VARCHAR
            url_of_proxy_and_resource: (String) This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.
            value: (String) Header value
        importStatements:
            - |-
              # format is database name | schema name | external function name | <list of function arg types, separated with '-'>
              terraform import snowflake_external_function.example 'dbName|schemaName|externalFunctionName|varchar-varchar-varchar'
    snowflake_external_oauth_integration:
        subCategory: ""
        description: An External OAuth security integration allows a client to use a third-party authorization server to obtain the access tokens needed to interact with Snowflake.
        name: snowflake_external_oauth_integration
        title: snowflake_external_oauth_integration Resource - terraform-provider-snowflake
        examples:
            - name: azure
              manifest: |-
                {
                  "audience_urls": [
                    "https://analysis.windows.net/powerbi/connector/Snowflake"
                  ],
                  "enabled": true,
                  "issuer": "https://sts.windows.net/00000000-0000-0000-0000-000000000000",
                  "jws_keys_urls": [
                    "https://login.windows.net/common/discovery/keys"
                  ],
                  "name": "AZURE_POWERBI",
                  "snowflake_user_mapping_attribute": "LOGIN_NAME",
                  "token_user_mapping_claims": [
                    "upn"
                  ],
                  "type": "AZURE"
                }
        argumentDocs:
            allowed_roles: (Set of String) Specifies the list of roles that the client can set as the primary role.
            any_role_mode: (String) Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token.
            audience_urls: (Set of String) Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL
            blocked_roles: (Set of String) Specifies the list of roles that a client cannot set as the primary role. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
            comment: (String) Specifies a comment for the OAuth integration.
            created_on: (String) Date and time when the External OAUTH integration was created.
            enabled: (Boolean) Specifies whether to initiate operation of the integration or suspend it.
            id: (String) The ID of this resource.
            issuer: (String) Specifies the URL to define the OAuth 2.0 authorization server.
            jws_keys_urls: (Set of String) Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3.
            name: (String) Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
            rsa_public_key: (String) Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.
            rsa_public_key_2: (String) Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation.
            scope_delimiter: (String) Specifies the scope delimiter in the authorization token.
            scope_mapping_attribute: (String) Specifies the access token claim to map the access token to an account role.
            snowflake_user_mapping_attribute: (String) Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record.
            token_user_mapping_claims: (Set of String) Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record.
            type: (String) Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server.
        importStatements:
            - terraform import snowflake_external_oauth_integration.example name
    snowflake_external_table:
        subCategory: ""
        name: snowflake_external_table
        title: snowflake_external_table Resource - terraform-provider-snowflake
        examples:
            - name: external_table
              manifest: |-
                {
                  "column": [
                    {
                      "name": "id",
                      "type": "int"
                    },
                    {
                      "name": "data",
                      "type": "text"
                    }
                  ],
                  "comment": "External table",
                  "database": "db",
                  "file_format": "TYPE = CSV FIELD_DELIMITER = '|'",
                  "name": "external_table",
                  "schema": "schema"
                }
        argumentDocs:
            as: (String) String that specifies the expression for the column. When queried, the column returns results derived from this expression.
            auto_refresh: (Boolean) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.
            aws_sns_topic: (String) Specifies the aws sns topic for the external table.
            column: '(Block List, Min: 1) Definitions of a column to create in the external table. Minimum one required. (see below for nested schema)'
            comment: (String) Specifies a comment for the external table.
            copy_grants: (Boolean) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant
            database: (String) The database in which to create the external table.
            file_format: (String) Specifies the file format for the external table.
            id: (String) The ID of this resource.
            location: (String) Specifies a location for the external table.
            name: (String) Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.
            owner: (String) Name of the role that owns the external table.
            partition_by: (List of String) Specifies any partition columns to evaluate for the external table.
            pattern: (String) Specifies the file names and/or paths on the external stage to match.
            refresh_on_create: (Boolean) Specifies weather to refresh when an external table is created.
            schema: (String) The schema in which to create the external table.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            type: (String) Column type, e.g. VARIANT
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - |-
              # format is database name | schema name | external table name
              terraform import snowflake_external_table.example 'dbName|schemaName|externalTableName'
    snowflake_external_table_grant:
        subCategory: ""
        name: snowflake_external_table_grant
        title: snowflake_external_table_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "external_table_name": "external_table",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future external tables on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            external_table_name: (String) The name of the external table on which to grant privileges immediately (only valid if on_future is false).
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all external tables in the given schema. When this is true and no schema_name is provided apply this grant on all external tables in the given database. The external_table_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema_name is provided apply this grant on all future external tables in the given database. The external_table_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future external table. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future external tables on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database|schema|external_table|privilege|with_grant_option|on_future|roles|shares
              terraform import snowflake_external_table_grant.example "MY_DATABASE|MY_SCHEMA|MY_TABLE_NAME|SELECT|false|false|role1,role2|share1,share2"
    snowflake_failover_group:
        subCategory: ""
        name: snowflake_failover_group
        title: snowflake_failover_group Resource - terraform-provider-snowflake
        examples:
            - name: source_failover_group
              manifest: |-
                {
                  "allowed_accounts": [
                    "\u003corg_name\u003e.\u003ctarget_account_name1\u003e",
                    "\u003corg_name\u003e.\u003ctarget_account_name2\u003e"
                  ],
                  "allowed_databases": [
                    "${snowflake_database.db.name}"
                  ],
                  "allowed_integration_types": [
                    "SECURITY INTEGRATIONS"
                  ],
                  "name": "FG1",
                  "object_types": [
                    "WAREHOUSES",
                    "DATABASES",
                    "INTEGRATIONS",
                    "ROLES"
                  ],
                  "replication_schedule": [
                    {
                      "cron": [
                        {
                          "expression": "0 0 10-20 * TUE,THU",
                          "time_zone": "UTC"
                        }
                      ]
                    }
                  ]
                }
              dependencies:
                snowflake_database.db: |-
                    {
                      "name": "db1"
                    }
            - name: target_failover_group
              manifest: |-
                {
                  "from_replica": [
                    {
                      "name": "${snowflake_failover_group.fg.name}",
                      "organization_name": "...",
                      "source_account_name": "..."
                    }
                  ],
                  "name": "FG1",
                  "provider": "${snowflake.account2}"
                }
              references:
                from_replica.name: snowflake_failover_group.fg.name
                provider: snowflake.account2
              dependencies:
                snowflake_database.db: |-
                    {
                      "name": "db1"
                    }
        argumentDocs:
            allowed_accounts: (Set of String) Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form <org_name>.<target_account_name>
            allowed_databases: (Set of String) Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.
            allowed_integration_types: '(Set of String) Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: "SECURITY INTEGRATIONS", "API INTEGRATIONS"'
            allowed_shares: (Set of String) Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.
            cron: '(Block List, Max: 1) Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday) (see below for nested schema)'
            expression: '(String) Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)'
            from_replica: '(Block List, Max: 1) Specifies the name of the replica to use as the source for the failover group. (see below for nested schema)'
            id: (String) The ID of this resource.
            ignore_edition_check: (Boolean) Allows replicating objects to accounts on lower editions.
            interval: (Number) Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
            name: (String) Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. "My object"). Identifiers enclosed in double quotes are also case-sensitive.
            object_types: '(Set of String) Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: "ACCOUNT PARAMETERS", "DATABASES", "INTEGRATIONS", "NETWORK POLICIES", "RESOURCE MONITORS", "ROLES", "SHARES", "USERS", "WAREHOUSES"'
            organization_name: (String) Name of your Snowflake organization.
            replication_schedule: '(Block List, Max: 1) Specifies the schedule for refreshing secondary failover groups. (see below for nested schema)'
            source_account_name: (String) Source account from which you are enabling replication and failover of the specified objects.
            time_zone: (String) Specifies the time zone for secondary group refresh.
        importStatements:
            - terraform import snowflake_failover_group.example 'fg1'
    snowflake_failover_group_grant Resource - terraform-provider-snowflake:
        subCategory: ""
        name: snowflake_failover_group_grant Resource - terraform-provider-snowflake
        title: snowflake_failover_group_grant Resource - terraform-provider-snowflake
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            failover_group_name: (String) The name of the failover group on which to grant privileges.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the failover group. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements: []
    snowflake_file_format:
        subCategory: ""
        name: snowflake_file_format
        title: snowflake_file_format Resource - terraform-provider-snowflake
        examples:
            - name: example_file_format
              manifest: |-
                {
                  "database": "EXAMPLE_DB",
                  "format_type": "CSV",
                  "name": "EXAMPLE_FILE_FORMAT",
                  "schema": "EXAMPLE_SCHEMA"
                }
        argumentDocs:
            allow_duplicate: (Boolean) Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
            binary_as_text: (Boolean) Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
            binary_format: (String) Defines the encoding format for binary input or output.
            comment: (String) Specifies a comment for the file format.
            compression: (String) Specifies the current compression algorithm for the data file.
            database: (String) The database in which to create the file format.
            date_format: (String) Defines the format of date values in the data files (data loading) or table (data unloading).
            disable_auto_convert: (Boolean) Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
            disable_snowflake_data: (Boolean) Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
            empty_field_as_null: (Boolean) Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
            enable_octal: (Boolean) Boolean that enables parsing of octal numbers.
            encoding: (String) String (constant) that specifies the character set of the source data when loading data into a table.
            error_on_column_count_mismatch: (Boolean) Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
            escape: (String) Single character string used as the escape character for field values.
            escape_unenclosed_field: (String) Single character string used as the escape character for unenclosed field values only.
            field_delimiter: (String) Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
            field_optionally_enclosed_by: (String) Character used to enclose strings.
            file_extension: (String) Specifies the extension for files unloaded to a stage.
            format_type: (String) Specifies the format of the input files (for data loading) or output files (for data unloading).
            id: (String) The ID of this resource.
            ignore_utf8_errors: (Boolean) Boolean that specifies whether UTF-8 encoding errors produce error conditions.
            name: (String) Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
            null_if: (List of String) String used to convert to and from SQL NULL.
            parse_header: (Boolean) Boolean that specifies whether to use the first row headers in the data files to determine column names.
            preserve_space: (Boolean) Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
            record_delimiter: (String) Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
            replace_invalid_characters: (Boolean) Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).
            schema: (String) The schema in which to create the file format.
            skip_blank_lines: (Boolean) Boolean that specifies to skip any blank lines encountered in the data files.
            skip_byte_order_mark: (Boolean) Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
            skip_header: (Number) Number of lines at the start of the file to skip.
            strip_null_values: (Boolean) Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
            strip_outer_array: (Boolean) Boolean that instructs the JSON parser to remove outer brackets.
            strip_outer_element: (Boolean) Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
            time_format: (String) Defines the format of time values in the data files (data loading) or table (data unloading).
            timestamp_format: (String) Defines the format of timestamp values in the data files (data loading) or table (data unloading).
            trim_space: (Boolean) Boolean that specifies whether to remove white space from fields.
        importStatements:
            - |-
              # format is database name | schema name | file format name
              terraform import snowflake_file_format.example 'dbName|schemaName|fileFormatName'
    snowflake_file_format_grant:
        subCategory: ""
        name: snowflake_file_format_grant
        title: snowflake_file_format_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "file_format_name": "file_format",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future file formats on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            file_format_name: (String) The name of the file format on which to grant privileges immediately (only valid if on_future is false).
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all file formats in the given schema. When this is true and no schema_name is provided apply this grant on all file formats in the given database. The file_format_name field must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future file formats in the given schema. When this is true and no schema_name is provided apply this grant on all future file formats in the given database. The file_format_name field must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future file format. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future file formats on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|file_format_name|privilege|with_grant_option|on_future|roles
              terraform import snowflake_file_format_grant.example "MY_DATABASE|MY_SCHEMA|MY_FILE_FORMAT|USAGE|false|false|role1,role2'
    snowflake_function:
        subCategory: ""
        name: snowflake_function
        title: snowflake_function Resource - terraform-provider-snowflake
        examples:
            - name: test_funct_java
              manifest: |-
                {
                  "arguments": [
                    {
                      "name": "arg1",
                      "type": "number"
                    }
                  ],
                  "comment": "Example for java language",
                  "database": "MY_DB",
                  "handler": "CoolFunc.test",
                  "language": "java",
                  "name": "my_java_func",
                  "return_type": "varchar",
                  "schema": "MY_SCHEMA",
                  "statement": "class CoolFunc {public static String test(int n) {return \"hello!\";}}"
                }
              dependencies:
                snowflake_database.db: |-
                    {
                      "data_retention_days": 1,
                      "name": "MY_DB"
                    }
                snowflake_schema.schema: |-
                    {
                      "data_retention_days": 1,
                      "database": "${snowflake_database.db.name}",
                      "name": "MY_SCHEMA"
                    }
            - name: python_test
              manifest: |-
                {
                  "arguments": [
                    {
                      "name": "arg1",
                      "type": "number"
                    }
                  ],
                  "comment": "Example for Python language",
                  "database": "MY_DB",
                  "handler": "add_py",
                  "language": "python",
                  "name": "MY_PYTHON_FUNC",
                  "null_input_behavior": "CALLED ON NULL INPUT",
                  "return_behavior": "VOLATILE",
                  "return_type": "NUMBER(38,0)",
                  "runtime_version": "3.8",
                  "schema": "MY_SCHEMA",
                  "statement": "def add_py(i): return i+1"
                }
              dependencies:
                snowflake_database.db: |-
                    {
                      "data_retention_days": 1,
                      "name": "MY_DB"
                    }
                snowflake_schema.schema: |-
                    {
                      "data_retention_days": 1,
                      "database": "${snowflake_database.db.name}",
                      "name": "MY_SCHEMA"
                    }
            - name: sql_test
              manifest: |-
                {
                  "arguments": [
                    {
                      "name": "arg1",
                      "type": "number"
                    }
                  ],
                  "comment": "Example for SQL language",
                  "database": "MY_DB",
                  "name": "MY_SQL_FUNC",
                  "null_input_behavior": "CALLED ON NULL INPUT",
                  "return_behavior": "VOLATILE",
                  "return_type": "NUMBER(38,0)",
                  "schema": "MY_SCHEMA",
                  "statement": "select arg1 + 1"
                }
              dependencies:
                snowflake_database.db: |-
                    {
                      "data_retention_days": 1,
                      "name": "MY_DB"
                    }
                snowflake_schema.schema: |-
                    {
                      "data_retention_days": 1,
                      "database": "${snowflake_database.db.name}",
                      "name": "MY_SCHEMA"
                    }
        argumentDocs:
            arguments: (Block List) List of the arguments for the function (see below for nested schema)
            comment: (String) Specifies a comment for the function.
            database: (String) The database in which to create the function. Don't use the | character.
            handler: (String) The handler method for Java / Python function.
            id: (String) The ID of this resource.
            imports: (List of String) Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.
            is_secure: (Boolean) Specifies that the function is secure.
            language: (String) The language of the statement
            name: (String) Specifies the identifier for the function; does not have to be unique for the schema in which the function is created. Don't use the | character.
            null_input_behavior: (String) Specifies the behavior of the function when called with null inputs.
            packages: '(List of String) List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package_name:version_number, where package_name is snowflake_domain:package. For Python use it should be: (''numpy'',''pandas'',''xgboost==1.5.0'').'
            return_behavior: (String) Specifies the behavior of the function when returning results
            return_type: (String) The return type of the function
            runtime_version: (String) Required for Python functions. Specifies Python runtime version.
            schema: (String) The schema in which to create the function. Don't use the | character.
            statement: (String) Specifies the javascript / java / sql / python code used to create the function.
            target_path: (String) The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.
            type: (String) The argument type
        importStatements:
            - |-
              # format is database name | schema name | function name | <list of arg types, separated with '-'>
              terraform import snowflake_function.example 'dbName|schemaName|functionName|varchar-varchar-varchar'
    snowflake_function_grant:
        subCategory: ""
        name: snowflake_function_grant
        title: snowflake_function_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "argument_data_types": [
                    "array",
                    "string"
                  ],
                  "database_name": "database",
                  "function_name": "function",
                  "on_future": false,
                  "privilege": "USAGE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            argument_data_types: (List of String) List of the argument data types for the function (must be present if function has arguments and function_name is present)
            database_name: (String) The name of the database containing the current or future functions on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            function_name: (String) The name of the function on which to grant privileges immediately (only valid if on_future is false).
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all functions in the given schema. When this is true and no schema_name is provided apply this grant on all functions in the given database. The function_name, arguments, return_type, and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future functions in the given schema. When this is true and no schema_name is provided apply this grant on all future functions in the given database. The function_name, arguments, return_type, and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future function. Must be one of USAGE or OWNERSHIP. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future functions on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|function_name|argument_data_types|privilege|with_grant_option|on_future|roles|shares
              terraform import snowflake_function_grant.example "MY_DATABASE|MY_SCHEMA|MY_FUNCTION|ARG1TYPE,ARG2TYPE|USAGE|false|false|role1,role2|share1,share2"
    snowflake_grant_privileges_to_role:
        subCategory: ""
        name: snowflake_grant_privileges_to_role
        title: snowflake_grant_privileges_to_role Resource - terraform-provider-snowflake
        examples:
            - name: g1
              manifest: |-
                {
                  "on_account": true,
                  "privileges": [
                    "MODIFY",
                    "USAGE"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                role_name: snowflake_role.r.name
            - name: g2
              manifest: |-
                {
                  "all_privileges": true,
                  "on_account": true,
                  "role_name": "${snowflake_role.r.name}",
                  "with_grant_option": true
                }
              references:
                role_name: snowflake_role.r.name
            - name: g3
              manifest: |-
                {
                  "on_account_object": [
                    {
                      "object_name": "${snowflake_database.d.name}",
                      "object_type": "DATABASE"
                    }
                  ],
                  "privileges": [
                    "CREATE",
                    "MONITOR"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                on_account_object.object_name: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g4
              manifest: |-
                {
                  "all_privileges": true,
                  "on_account_object": [
                    {
                      "object_name": "${snowflake_database.d.name}",
                      "object_type": "DATABASE"
                    }
                  ],
                  "role_name": "${snowflake_role.r.name}",
                  "with_grant_option": true
                }
              references:
                on_account_object.object_name: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g5
              manifest: |-
                {
                  "on_schema": [
                    {
                      "schema_name": "\"my_db\".\"my_schema\""
                    }
                  ],
                  "privileges": [
                    "MODIFY",
                    "CREATE TABLE"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                role_name: snowflake_role.r.name
            - name: g6
              manifest: |-
                {
                  "all_privileges": true,
                  "on_schema": [
                    {
                      "schema_name": "\"my_db\".\"my_schema\""
                    }
                  ],
                  "role_name": "${snowflake_role.r.name}",
                  "with_grant_option": true
                }
              references:
                role_name: snowflake_role.r.name
            - name: g7
              manifest: |-
                {
                  "on_schema": [
                    {
                      "all_schemas_in_database": "${snowflake_database.d.name}"
                    }
                  ],
                  "privileges": [
                    "MODIFY",
                    "CREATE TABLE"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                on_schema.all_schemas_in_database: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g8
              manifest: |-
                {
                  "on_schema": [
                    {
                      "future_schemas_in_database": "${snowflake_database.d.name}"
                    }
                  ],
                  "privileges": [
                    "MODIFY",
                    "CREATE TABLE"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                on_schema.future_schemas_in_database: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g9
              manifest: |-
                {
                  "on_schema_object": [
                    {
                      "object_name": "\"my_db\".\"my_schema\".\"my_view\"",
                      "object_type": "VIEW"
                    }
                  ],
                  "privileges": [
                    "SELECT",
                    "REFERENCES"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                role_name: snowflake_role.r.name
            - name: g10
              manifest: |-
                {
                  "all_privileges": true,
                  "on_schema_object": [
                    {
                      "object_name": "\"my_db\".\"my_schema\".\"my_view\"",
                      "object_type": "VIEW"
                    }
                  ],
                  "role_name": "${snowflake_role.r.name}",
                  "with_grant_option": true
                }
              references:
                role_name: snowflake_role.r.name
            - name: g11
              manifest: |-
                {
                  "on_schema_object": [
                    {
                      "all": [
                        {
                          "in_database": "${snowflake_database.d.name}",
                          "object_type_plural": "TABLES"
                        }
                      ]
                    }
                  ],
                  "privileges": [
                    "SELECT",
                    "INSERT"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                on_schema_object.all.in_database: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g12
              manifest: |-
                {
                  "on_schema_object": [
                    {
                      "all": [
                        {
                          "in_schema": "\"my_db\".\"my_schema\"",
                          "object_type_plural": "TABLES"
                        }
                      ]
                    }
                  ],
                  "privileges": [
                    "SELECT",
                    "INSERT"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                role_name: snowflake_role.r.name
            - name: g13
              manifest: |-
                {
                  "on_schema_object": [
                    {
                      "future": [
                        {
                          "in_database": "${snowflake_database.d.name}",
                          "object_type_plural": "TABLES"
                        }
                      ]
                    }
                  ],
                  "privileges": [
                    "SELECT",
                    "INSERT"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                on_schema_object.future.in_database: snowflake_database.d.name
                role_name: snowflake_role.r.name
            - name: g14
              manifest: |-
                {
                  "on_schema_object": [
                    {
                      "future": [
                        {
                          "in_schema": "\"my_db\".\"my_schema\"",
                          "object_type_plural": "TABLES"
                        }
                      ]
                    }
                  ],
                  "privileges": [
                    "SELECT",
                    "INSERT"
                  ],
                  "role_name": "${snowflake_role.r.name}"
                }
              references:
                role_name: snowflake_role.r.name
        argumentDocs:
            all: '(Block List, Max: 1) Configures the privilege to be granted on all objects in eihter a database or schema. (see below for nested schema)'
            all_privileges: (Boolean) Grant all privileges on the account role.
            all_schemas_in_database: (String) The fully qualified name of the database.
            future: '(Block List, Max: 1) Configures the privilege to be granted on future objects in eihter a database or schema. (see below for nested schema)'
            future_schemas_in_database: (String) The fully qualified name of the database.
            id: (String) The ID of this resource.
            in_database: (String) The fully qualified name of the database.
            in_schema: (String) The fully qualified name of the schema.
            object_name: (String) The fully qualified name of the object on which privileges will be granted.
            object_type: '(String) The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP'
            object_type_plural: '(String) The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | DYNAMIC TABLES | EVENT TABLES | FILE FORMATS | FUNCTIONS | PROCEDURES | SECRETS | SEQUENCES | PIPES | MASKING POLICIES | PASSWORD POLICIES | ROW ACCESS POLICIES | SESSION POLICIES | TAGS | STAGES | STREAMS | TABLES | EXTERNAL TABLES | TASKS | VIEWS | MATERIALIZED VIEWS'
            on_account: (Boolean) If true, the privileges will be granted on the account.
            on_account_object: '(Block List, Max: 1) Specifies the account object on which privileges will be granted (see below for nested schema)'
            on_schema: '(Block List, Max: 1) Specifies the schema on which privileges will be granted. (see below for nested schema)'
            on_schema_object: '(Block List, Max: 1) Specifies the schema object on which privileges will be granted. (see below for nested schema)'
            privileges: (Set of String) The privileges to grant on the account role.
            role_name: (String) The fully qualified name of the role to which privileges will be granted.
            schema_name: (String) The fully qualified name of the schema.
            with_grant_option: (Boolean) Specifies whether the grantee can grant the privileges to other users.
        importStatements:
            - |-
              # format is role_name (string) | privileges (comma-delimited string) | all_privileges (bool) |with_grant_option (bool) | on_account (bool) | on_account_object (bool) | on_schema (bool) | on_schema_object (bool) | all (bool) | future (bool) | object_type (string) | object_name (string) | object_type_plural (string) | in_schema (bool) | schema_name (string) | in_database (bool) | database_name (string)
              terraform import "test_role|MANAGE GRANTS,MONITOR USAGE|false|false|true|false|false|false|false|false||||false||false|"
    snowflake_integration_grant:
        subCategory: ""
        name: snowflake_integration_grant
        title: snowflake_integration_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "integration_name": "integration",
                  "privilege": "USAGE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            integration_name: (String) Identifier for the integration; must be unique for your account.
            privilege: (String) The privilege to grant on the integration. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is integration_name|privilege|with_grant_option|roles
              terraform import snowflake_integration_grant.example "MY_INTEGRATION|USAGE|false|role1,role2"
    snowflake_managed_account:
        subCategory: ""
        name: snowflake_managed_account
        title: snowflake_managed_account Resource - terraform-provider-snowflake
        examples:
            - name: account
              manifest: |-
                {
                  "admin_name": "admin",
                  "admin_password": "secret",
                  "cloud": "aws",
                  "comment": "A managed account.",
                  "locator": "managed-account",
                  "name": "managed account",
                  "region": "us-west-2",
                  "type": "READER"
                }
        argumentDocs:
            admin_name: (String) Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.
            admin_password: (String, Sensitive) Password for the initial user in the managed account.
            cloud: (String) Cloud in which the managed account is located.
            comment: (String) Specifies a comment for the managed account.
            created_on: (String) Date and time when the managed account was created.
            id: (String) The ID of this resource.
            locator: (String) Display name of the managed account.
            name: (String) Identifier for the managed account; must be unique for your account.
            region: (String) Snowflake Region in which the managed account is located.
            type: (String) Specifies the type of managed account.
            url: (String) URL for accessing the managed account, particularly through the web interface.
        importStatements:
            - terraform import snowflake_managed_account.example name
    snowflake_masking_policy:
        subCategory: ""
        name: snowflake_masking_policy
        title: snowflake_masking_policy Resource - terraform-provider-snowflake
        examples:
            - name: test
              manifest: |-
                {
                  "database": "EXAMPLE_DB",
                  "masking_expression": "case \n  when current_role() in ('ROLE_A') then \n    val \n  when is_role_in_session( 'ROLE_B' ) then \n    'ABC123'\n  else\n    '******'\nend\n",
                  "name": "EXAMPLE_MASKING_POLICY",
                  "return_data_type": "VARCHAR",
                  "schema": "EXAMPLE_SCHEMA",
                  "signature": [
                    {
                      "column": [
                        {
                          "name": "val",
                          "type": "VARCHAR"
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            column: '(Block List, Min: 1) (see below for nested schema)'
            comment: (String) Specifies a comment for the masking policy.
            database: (String) The database in which to create the masking policy.
            exempt_other_policies: (Boolean) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy.
            id: (String) The ID of this resource.
            if_not_exists: (Boolean) Prevent overwriting a previous masking policy with the same name.
            masking_expression: (String) Specifies the SQL expression that transforms the data.
            name: (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
            or_replace: (Boolean) Whether to override a previous masking policy with the same name.
            qualified_name: (String) Specifies the qualified identifier for the masking policy.
            return_data_type: (String) Specifies the data type to return.
            schema: (String) The schema in which to create the masking policy.
            signature: '(Block List, Min: 1, Max: 1) The signature for the masking policy; specifies the input columns and data types to evaluate at query runtime. (see below for nested schema)'
            type: (String) Specifies the column type to mask.
        importStatements:
            - |-
              # format is database name | schema name | policy name
              terraform import snowflake_masking_policy.example 'dbName|schemaName|policyName'
    snowflake_masking_policy_grant:
        subCategory: ""
        name: snowflake_masking_policy_grant
        title: snowflake_masking_policy_grant Resource - terraform-provider-snowflake
        examples:
            - name: example
              manifest: |-
                {
                  "database_name": "EXAMPLE_DB_NAME",
                  "enable_multiple_grants": true,
                  "masking_policy_name": "EXAMPLE_MASKING_POLICY_NAME",
                  "privilege": "APPLY",
                  "roles": [
                    "ROLE1_NAME",
                    "ROLE2_NAME"
                  ],
                  "schema_name": "EXAMPLE_SCHEMA_NAME",
                  "with_grant_option": true
                }
        argumentDocs:
            database_name: (String) The name of the database containing the masking policy on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            masking_policy_name: (String) The name of the masking policy on which to grant privileges immediately.
            privilege: (String) The privilege to grant on the masking policy. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the masking policy on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|masking_policy_name|privilege|with_grant_option|roles
              terraform import snowflake_masking_policy_grant.example "dbName|schemaName|maskingPolicyName|USAGE|false|role1,role2"
    snowflake_materialized_view:
        subCategory: ""
        name: snowflake_materialized_view
        title: snowflake_materialized_view Resource - terraform-provider-snowflake
        examples:
            - name: view
              manifest: |-
                {
                  "comment": "comment",
                  "database": "db",
                  "is_secure": false,
                  "name": "view",
                  "or_replace": false,
                  "schema": "schema",
                  "statement": "select * from foo;\n",
                  "warehouse": "warehouse"
                }
        argumentDocs:
            comment: (String) Specifies a comment for the view.
            database: (String) The database in which to create the view. Don't use the | character.
            id: (String) The ID of this resource.
            is_secure: (Boolean) Specifies that the view is secure.
            name: (String) Specifies the identifier for the view; must be unique for the schema in which the view is created.
            or_replace: (Boolean) Overwrites the View if it exists.
            schema: (String) The schema in which to create the view. Don't use the | character.
            statement: (String) Specifies the query used to create the view.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            value: (String) Tag value, e.g. marketing_info.
            warehouse: (String) The warehouse name.
        importStatements:
            - |-
              # format is database name | schema name | view name
              terraform import snowflake_materialized_view.example 'dbName|schemaName|viewName'
    snowflake_materialized_view_grant:
        subCategory: ""
        name: snowflake_materialized_view_grant
        title: snowflake_materialized_view_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "materialized_view_name": "materialized_view",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future materialized views on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            materialized_view_name: (String) The name of the materialized view on which to grant privileges immediately (only valid if on_future and on_all are false).
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all materialized views in the given schema. When this is true and no schema_name is provided apply this grant on all materialized views in the given database. The materialized_view_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future materialized views in the given schema. When this is true and no schema_name is provided apply this grant on all future materialized views in the given database. The materialized_view_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future materialized view. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future materialized views on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future and on_all are false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|materialized_view_name|privilege|with_grant_option|on_future|on_all|roles|shares
              terraform import snowflake_materialized_view_grant.example "MY_DATABASE|MY_SCHEMA|MY_MV_NAME|SELECT|false|false|role1,role2|share1,share2"
    snowflake_network_policy:
        subCategory: ""
        name: snowflake_network_policy
        title: snowflake_network_policy Resource - terraform-provider-snowflake
        examples:
            - name: policy
              manifest: |-
                {
                  "allowed_ip_list": [
                    "192.168.0.100/24"
                  ],
                  "blocked_ip_list": [
                    "192.168.0.101"
                  ],
                  "comment": "A policy.",
                  "name": "policy"
                }
        argumentDocs:
            allowed_ip_list: (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account
            blocked_ip_list: (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake accountDo not add 0.0.0.0/0 to blocked_ip_list
            comment: (String) Specifies a comment for the network policy.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
        importStatements:
            - terraform import snowflake_network_policy.example policyname
    snowflake_network_policy_attachment:
        subCategory: ""
        name: snowflake_network_policy_attachment
        title: snowflake_network_policy_attachment Resource - terraform-provider-snowflake
        examples:
            - name: attach
              manifest: |-
                {
                  "network_policy_name": "policy",
                  "set_for_account": false,
                  "users": [
                    "user1",
                    "user2"
                  ]
                }
        argumentDocs:
            id: (String) The ID of this resource.
            network_policy_name: (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.
            set_for_account: '(Boolean) Specifies whether the network policy should be applied globally to your Snowflake accountNote: The Snowflake user running terraform apply must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.Additionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user''s responsibility to enforce this. If multiple network policy resources have set_for_account: true, the final policy set on the account will be non-deterministic.'
            users: (Set of String) Specifies which users the network policy should be attached to
        importStatements:
            - terraform import snowflake_network_policy_attachment.example attachment_policyname
    snowflake_notification_integration:
        subCategory: ""
        name: snowflake_notification_integration
        title: snowflake_notification_integration Resource - terraform-provider-snowflake
        examples:
            - name: integration
              manifest: |-
                {
                  "azure_storage_queue_primary_uri": "...",
                  "azure_tenant_id": "...",
                  "comment": "A notification integration.",
                  "direction": "OUTBOUND",
                  "enabled": true,
                  "name": "notification",
                  "notification_provider": "AZURE_STORAGE_QUEUE",
                  "type": "QUEUE"
                }
        argumentDocs:
            aws_sns_external_id: (String) The external ID that Snowflake will use when assuming the AWS role
            aws_sns_iam_user_arn: (String) The Snowflake user that will attempt to assume the AWS role.
            aws_sns_role_arn: (String) AWS IAM role ARN for notification integration to assume
            aws_sns_topic_arn: (String) AWS SNS Topic ARN for notification integration to connect to
            aws_sqs_arn: (String) AWS SQS queue ARN for notification integration to connect to
            aws_sqs_external_id: (String) The external ID that Snowflake will use when assuming the AWS role
            aws_sqs_iam_user_arn: (String) The Snowflake user that will attempt to assume the AWS role.
            aws_sqs_role_arn: (String) AWS IAM role ARN for notification integration to assume
            azure_storage_queue_primary_uri: (String) The queue ID for the Azure Queue Storage queue created for Event Grid notifications
            azure_tenant_id: (String) The ID of the Azure Active Directory tenant used for identity management
            comment: (String) A comment for the integration
            created_on: (String) Date and time when the notification integration was created.
            direction: (String) Direction of the cloud messaging with respect to Snowflake (required only for error notifications)
            enabled: (Boolean)
            gcp_pubsub_service_account: (String) The GCP service account identifier that Snowflake will use when assuming the GCP role
            gcp_pubsub_subscription_name: (String) The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.
            gcp_pubsub_topic_name: (String) The topic id that Snowflake will use to push notifications.
            id: (String) The ID of this resource.
            name: (String)
            notification_provider: (String) The third-party cloud message queuing service (e.g. AZURE_STORAGE_QUEUE, AWS_SQS, AWS_SNS)
            type: (String) A type of integration
        importStatements:
            - terraform import snowflake_notification_integration.example name
    snowflake_oauth_integration:
        subCategory: ""
        name: snowflake_oauth_integration
        title: snowflake_oauth_integration Resource - terraform-provider-snowflake
        examples:
            - name: tableau_desktop
              manifest: |-
                {
                  "blocked_roles_list": [
                    "SYSADMIN"
                  ],
                  "enabled": true,
                  "name": "TABLEAU_DESKTOP",
                  "oauth_client": "TABLEAU_DESKTOP",
                  "oauth_issue_refresh_tokens": true,
                  "oauth_refresh_token_validity": 3600
                }
        argumentDocs:
            blocked_roles_list: (Set of String) List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
            comment: (String) Specifies a comment for the OAuth integration.
            created_on: (String) Date and time when the OAuth integration was created.
            enabled: (Boolean) Specifies whether this OAuth integration is enabled or disabled.
            id: (String) The ID of this resource.
            name: (String) Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
            oauth_client: (String) Specifies the OAuth client type.
            oauth_client_type: (String) Specifies the type of client being registered. Snowflake supports both confidential and public clients.
            oauth_issue_refresh_tokens: (Boolean) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
            oauth_redirect_uri: (String) Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
            oauth_refresh_token_validity: (Number) Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.
            oauth_use_secondary_roles: (String) Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
        importStatements:
            - terraform import snowflake_oauth_integration.example name
    snowflake_object_parameter:
        subCategory: ""
        name: snowflake_object_parameter
        title: snowflake_object_parameter Resource - terraform-provider-snowflake
        examples:
            - name: o
              manifest: |-
                {
                  "key": "SUSPEND_TASK_AFTER_NUM_FAILURES",
                  "object_identifier": [
                    {
                      "name": "${snowflake_database.d.name}"
                    }
                  ],
                  "object_type": "DATABASE",
                  "value": "33"
                }
              references:
                object_identifier.name: snowflake_database.d.name
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "TEST_DB"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_SCHEMA"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "id",
                          "type": "NUMBER"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_TABLE",
                      "schema": "${snowflake_schema.s.name}"
                    }
            - name: o2
              manifest: |-
                {
                  "key": "USER_TASK_TIMEOUT_MS",
                  "object_identifier": [
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "${snowflake_schema.s.name}"
                    }
                  ],
                  "object_type": "SCHEMA",
                  "value": "500"
                }
              references:
                object_identifier.database: snowflake_database.d.name
                object_identifier.name: snowflake_schema.s.name
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "TEST_DB"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_SCHEMA"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "id",
                          "type": "NUMBER"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_TABLE",
                      "schema": "${snowflake_schema.s.name}"
                    }
            - name: o3
              manifest: |-
                {
                  "key": "DATA_RETENTION_TIME_IN_DAYS",
                  "object_identifier": [
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "${snowflake_table.t.name}",
                      "schema": "${snowflake_schema.s.name}"
                    }
                  ],
                  "object_type": "TABLE",
                  "value": "89"
                }
              references:
                object_identifier.database: snowflake_database.d.name
                object_identifier.name: snowflake_table.t.name
                object_identifier.schema: snowflake_schema.s.name
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "TEST_DB"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_SCHEMA"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "id",
                          "type": "NUMBER"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_TABLE",
                      "schema": "${snowflake_schema.s.name}"
                    }
            - name: o4
              manifest: |-
                {
                  "key": "DATA_RETENTION_TIME_IN_DAYS",
                  "on_account": true,
                  "value": "89"
                }
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "TEST_DB"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_SCHEMA"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "id",
                          "type": "NUMBER"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "TEST_TABLE",
                      "schema": "${snowflake_schema.s.name}"
                    }
        argumentDocs:
            database: (String) Name of the database that the object was created in.
            id: (String) The ID of this resource.
            key: (String) Name of object parameter. Valid values are those in object parameters.
            name: (String) Name of the object to set the parameter for.
            object_identifier: (Block List) Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level. (see below for nested schema)
            object_type: (String) Type of object to which the parameter applies. Valid values are those in object types. If no value is provided, then the resource will default to setting the object parameter at account level.
            on_account: (Boolean) If true, the object parameter will be set on the account level.
            schema: (String) Name of the schema that the object was created in.
            value: (String) Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
        importStatements:
            - terraform import snowflake_object_parameter.s <key>❄️<object_type>❄️<object_identifier>
    snowflake_password_policy Resource - terraform-provider-snowflake:
        subCategory: ""
        description: A password policy specifies the requirements that must be met to create and reset a password to authenticate to Snowflake.
        name: snowflake_password_policy Resource - terraform-provider-snowflake
        title: snowflake_password_policy Resource - terraform-provider-snowflake
        argumentDocs:
            comment: (String) Adds a comment or overwrites an existing comment for the password policy.
            database: (String) The database this password policy belongs to.
            history: '(Number) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24'
            id: (String) The ID of this resource.
            if_not_exists: (Boolean) Prevent overwriting a previous password policy with the same name.
            lockout_time_mins: '(Number) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD_MAX_RETRIES). Supported range: 1 to 999, inclusive. Default: 15'
            max_age_days: '(Number) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.'
            max_length: '(Number) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD_MIN_LENGTH, PASSWORD_MIN_UPPER_CASE_CHARS, and PASSWORD_MIN_LOWER_CASE_CHARS. Supported range: 8 to 256, inclusive. Default: 256'
            max_retries: '(Number) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5'
            min_age_days: '(Number) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0'
            min_length: '(Number) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8'
            min_lower_case_chars: '(Number) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1'
            min_numeric_chars: '(Number) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1'
            min_special_chars: '(Number) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1'
            min_upper_case_chars: '(Number) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1'
            name: (String) Identifier for the password policy; must be unique for your account.
            or_replace: (Boolean) Whether to override a previous password policy with the same name.
            qualified_name: (String) The qualified name for the password policy.
            schema: (String) The schema this password policy belongs to.
        importStatements: []
    snowflake_pipe:
        subCategory: ""
        name: snowflake_pipe
        title: snowflake_pipe Resource - terraform-provider-snowflake
        examples:
            - name: pipe
              manifest: |-
                {
                  "auto_ingest": false,
                  "aws_sns_topic_arn": "...",
                  "comment": "A pipe.",
                  "copy_statement": "copy into mytable from @mystage",
                  "database": "db",
                  "name": "pipe",
                  "notification_channel": "...",
                  "schema": "schema"
                }
        argumentDocs:
            auto_ingest: (Boolean) Specifies a auto_ingest param for the pipe.
            aws_sns_topic_arn: (String) Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
            comment: (String) Specifies a comment for the pipe.
            copy_statement: (String) Specifies the copy statement for the pipe.
            database: (String) The database in which to create the pipe.
            error_integration: (String) Specifies the name of the notification integration used for error notifications.
            id: (String) The ID of this resource.
            integration: (String) Specifies an integration for the pipe.
            name: (String) Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
            notification_channel: (String) Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.
            owner: (String) Name of the role that owns the pipe.
            schema: (String) The schema in which to create the pipe.
        importStatements:
            - |-
              # format is database name | schema name | pipe name
              terraform import snowflake_pipe.example 'dbName|schemaName|pipeName'
    snowflake_pipe_grant:
        subCategory: ""
        name: snowflake_pipe_grant
        title: snowflake_pipe_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "pipe_name": "pipe",
                  "privilege": "OPERATE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future pipes on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future pipes in the given schema. When this is true and no schema_name is provided apply this grant on all future pipes in the given database. The pipe_name field must be unset in order to use on_future.
            pipe_name: (String) The name of the pipe on which to grant privileges immediately (only valid if on_future is false).
            privilege: (String) The privilege to grant on the current or future pipe. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future pipes on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|pipe_name|privilege|with_grant_option|on_future|roles
              terraform import snowflake_pipe_grant.example "MY_DATABASE|MY_SCHEMA|MY_PIPE_NAME|OPERATE|false|false|role1,role2'
    snowflake_procedure:
        subCategory: ""
        name: snowflake_procedure
        title: snowflake_procedure Resource - terraform-provider-snowflake
        examples:
            - name: proc
              manifest: |-
                {
                  "arguments": [
                    {
                      "name": "arg1",
                      "type": "varchar"
                    },
                    {
                      "name": "arg2",
                      "type": "DATE"
                    }
                  ],
                  "comment": "Procedure with 2 arguments",
                  "database": "${snowflake_database.db.name}",
                  "execute_as": "CALLER",
                  "language": "JAVASCRIPT",
                  "name": "SAMPLEPROC",
                  "null_input_behavior": "RETURNS NULL ON NULL INPUT",
                  "return_behavior": "IMMUTABLE",
                  "return_type": "VARCHAR",
                  "schema": "${snowflake_schema.schema.name}",
                  "statement": "var X=1\nreturn X\n"
                }
              references:
                database: snowflake_database.db.name
                schema: snowflake_schema.schema.name
              dependencies:
                snowflake_database.db: |-
                    {
                      "data_retention_days": 1,
                      "name": "MYDB"
                    }
                snowflake_schema.schema: |-
                    {
                      "data_retention_days": 1,
                      "database": "${snowflake_database.db.name}",
                      "name": "MYSCHEMA"
                    }
        argumentDocs:
            arguments: (Block List) List of the arguments for the procedure (see below for nested schema)
            comment: (String) Specifies a comment for the procedure.
            database: (String) The database in which to create the procedure. Don't use the | character.
            execute_as: (String) Sets execute context - see caller's rights and owner's rights
            handler: (String) The handler method for Java / Python procedures.
            id: (String) The ID of this resource.
            imports: (List of String) Imports for Java / Python procedures. For Java this a list of jar files, for Python this is a list of Python files.
            language: (String) Specifies the language of the stored procedure code.
            name: (String) Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don't use the | character.
            null_input_behavior: (String) Specifies the behavior of the procedure when called with null inputs.
            packages: '(List of String) List of package imports to use for Java / Python procedures. For Java, package imports should be of the form: package_name:version_number, where package_name is snowflake_domain:package. For Python use it should be: (''numpy'',''pandas'',''xgboost==1.5.0'').'
            return_behavior: (String) Specifies the behavior of the function when returning results
            return_type: (String) The return type of the procedure
            runtime_version: (String) Required for Python procedures. Specifies Python runtime version.
            schema: (String) The schema in which to create the procedure. Don't use the | character.
            statement: (String) Specifies the code used to create the procedure.
            type: (String) The argument type
        importStatements:
            - |-
              # format is database name | schema name | stored procedure name | <list of arg types, separated with '-'>
              terraform import snowflake_procedure.example 'dbName|schemaName|procedureName|varchar-varchar-varchar'
    snowflake_procedure_grant:
        subCategory: ""
        name: snowflake_procedure_grant
        title: snowflake_procedure_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "argument_data_types": [
                    "array",
                    "string"
                  ],
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "USAGE",
                  "procedure_name": "procedure",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            argument_data_types: (List of String) List of the argument data types for the procedure (must be present if procedure has arguments and procedure_name is present)
            database_name: (String) The name of the database containing the current or future procedures on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all procedures in the given schema. When this is true and no schema_name is provided apply this grant on all procedures in the given database. The procedure_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future procedures in the given schema. When this is true and no schema_name is provided apply this grant on all future procedures in the given database. The procedure_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future procedure. To grant all privileges, use the value ALL PRIVILEGES
            procedure_name: (String) The name of the procedure on which to grant privileges immediately (only valid if on_future is false).
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future procedures on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|procedure_name|argument_data_types|privilege|with_grant_option|on_future|roles|shares
              terraform import snowflake_procedure_grant.example "MY_DATABASE|MY_SCHEMA|MY_PROCEDURE|ARG1TYPE,ARG2TYPE|USAGE|false|false|role1,role2|share1,share2"
    snowflake_resource_monitor:
        subCategory: ""
        name: snowflake_resource_monitor
        title: snowflake_resource_monitor Resource - terraform-provider-snowflake
        examples:
            - name: monitor
              manifest: |-
                {
                  "credit_quota": 100,
                  "end_timestamp": "2021-12-07 00:00",
                  "frequency": "DAILY",
                  "name": "monitor",
                  "notify_triggers": [
                    40,
                    50
                  ],
                  "notify_users": [
                    "USERONE",
                    "USERTWO"
                  ],
                  "start_timestamp": "2020-12-07 00:00",
                  "suspend_immediate_triggers": 90,
                  "suspend_triggers": 50
                }
        argumentDocs:
            credit_quota: (Number) The number of credits allocated monthly to the resource monitor.
            end_timestamp: (String) The date and time when the resource monitor suspends the assigned warehouses.
            frequency: (String) The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
            id: (String) The ID of this resource.
            name: (String) Identifier for the resource monitor; must be unique for your account.
            notify_triggers: (Set of Number) A list of percentage thresholds at which to send an alert to subscribed users.
            notify_users: (Set of String) Specifies the list of users to receive email notifications on resource monitors.
            set_for_account: (Boolean) Specifies whether the resource monitor should be applied globally to your Snowflake account (defaults to false).
            start_timestamp: (String) The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
            suspend_immediate_trigger: (Number) The number that represents the percentage threshold at which to immediately suspend all warehouses.
            suspend_immediate_triggers: (Set of Number, Deprecated) A list of percentage thresholds at which to suspend all warehouses.
            suspend_trigger: (Number) The number that represents the percentage threshold at which to suspend all warehouses.
            suspend_triggers: (Set of Number, Deprecated) A list of percentage thresholds at which to suspend all warehouses.
            warehouses: (Set of String) A list of warehouses to apply the resource monitor to.
        importStatements:
            - |-
              # format is the resource monitor name
              terraform import snowflake_resource_monitor.example 'resourceMonitorName'
    snowflake_resource_monitor_grant:
        subCategory: ""
        name: snowflake_resource_monitor_grant
        title: snowflake_resource_monitor_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "monitor_name": "monitor",
                  "privilege": "MODIFY",
                  "roles": [
                    "role1"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            monitor_name: (String) Identifier for the resource monitor; must be unique for your account.
            privilege: (String) The privilege to grant on the resource monitor. To grant all privileges, use the value ALL PRIVILEGES
            roles: (Set of String) Grants privilege to these roles.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is monitor_name|privilege|with_grant_option|roles
              terraform import snowflake_resource_monitor_grant.example "MY_RESOURCE_MONITOR|MONITOR|false|role1,role2"
    snowflake_role:
        subCategory: ""
        name: snowflake_role
        title: snowflake_role Resource - terraform-provider-snowflake
        examples:
            - name: role
              manifest: |-
                {
                  "comment": "A role.",
                  "name": "role1"
                }
        argumentDocs:
            comment: (String)
            database: (String) Name of the database that the tag was created in.
            id: (String) The ID of this resource.
            name: (String)
            schema: (String) Name of the schema that the tag was created in.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - terraform import snowflake_role.example roleName
    snowflake_role_grants:
        subCategory: ""
        name: snowflake_role_grants
        title: snowflake_role_grants Resource - terraform-provider-snowflake
        examples:
            - name: grants
              manifest: |-
                {
                  "role_name": "${snowflake_role.role.name}",
                  "roles": [
                    "${snowflake_role.other_role.name}"
                  ],
                  "users": [
                    "${snowflake_user.user.name}",
                    "${snowflake_user.user2.name}"
                  ]
                }
              references:
                role_name: snowflake_role.role.name
              dependencies:
                snowflake_role.other_role: |-
                    {
                      "name": "rking_test_role2"
                    }
                snowflake_role.role: |-
                    {
                      "comment": "for testing",
                      "name": "rking_test_role"
                    }
                snowflake_user.user: |-
                    {
                      "comment": "for testing",
                      "name": "rking_test_user"
                    }
                snowflake_user.user2: |-
                    {
                      "comment": "for testing",
                      "name": "rking_test_user2"
                    }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            role_name: (String) The name of the role we are granting.
            roles: (Set of String) Grants role to this specified role.
            users: (Set of String) Grants role to this specified user.
        importStatements:
            - |-
              # format is role_name|roles|users
              terraform import snowflake_role_grants.example "role_name|role1,role2|user1,user2"
    snowflake_role_ownership_grant:
        subCategory: ""
        name: snowflake_role_ownership_grant
        title: snowflake_role_ownership_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "current_grants": "COPY",
                  "on_role_name": "${snowflake_role.role.name}",
                  "to_role_name": "${snowflake_role.other_role.name}"
                }
              references:
                on_role_name: snowflake_role.role.name
                to_role_name: snowflake_role.other_role.name
              dependencies:
                snowflake_role.other_role: |-
                    {
                      "name": "rking_test_role2"
                    }
                snowflake_role.role: |-
                    {
                      "comment": "for testing",
                      "name": "rking_test_role"
                    }
                snowflake_role_grants.grants: |-
                    {
                      "role_name": "${snowflake_role.role.name}",
                      "roles": [
                        "ACCOUNTADMIN"
                      ]
                    }
        argumentDocs:
            current_grants: (String) Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role.
            id: (String) The ID of this resource.
            on_role_name: (String) The name of the role ownership is granted on.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy.
            to_role_name: (String) The name of the role to grant ownership. Please ensure that the role that terraform is using is granted access.
        importStatements:
            - terraform import snowflake_role_ownership_grant.example "<on_role_name>|<to_role_name>|<current_grants>"
    snowflake_row_access_policy:
        subCategory: ""
        name: snowflake_row_access_policy
        title: snowflake_row_access_policy Resource - terraform-provider-snowflake
        examples:
            - name: example_row_access_policy
              manifest: |-
                {
                  "database": "EXAMPLE_DB",
                  "name": "EXAMPLE_ROW_ACCESS_POLICY",
                  "row_access_expression": "case when current_role() in ('ANALYST') then true else false end",
                  "schema": "EXAMPLE_SCHEMA",
                  "signature": {
                    "A": "VARCHAR",
                    "B": "VARCHAR"
                  }
                }
        argumentDocs:
            comment: (String) Specifies a comment for the row access policy.
            database: (String) The database in which to create the row access policy.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created.
            row_access_expression: (String) Specifies the SQL expression. The expression can be any boolean-valued SQL expression.
            schema: (String) The schema in which to create the row access policy.
            signature: (Map of String) Specifies signature (arguments) for the row access policy (uppercase and sorted to avoid recreation of resource). A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy.
        importStatements:
            - |-
              # format is database name | schema name | policy name
              terraform import snowflake_row_access_policy.example 'dbName|schemaName|policyName'
    snowflake_row_access_policy_grant:
        subCategory: ""
        name: snowflake_row_access_policy_grant
        title: snowflake_row_access_policy_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "privilege": "APPLY",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "row_access_policy_name": "row_access_policy",
                  "schema_name": "schema",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the row access policy on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the row access policy. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            row_access_policy_name: (String) The name of the row access policy on which to grant privileges immediately.
            schema_name: (String) The name of the schema containing the row access policy on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|row_access_policy_name|privilege|with_grant_option|roles
              terraform import snowflake_row_access_policy_grant.example "MY_DATABASE|MY_SCHEMA|MY_ROW_ACCESS_POLICY_NAME|SELECT|false|role1,role2"
    snowflake_saml_integration:
        subCategory: ""
        name: snowflake_saml_integration
        title: snowflake_saml_integration Resource - terraform-provider-snowflake
        examples:
            - name: saml_integration
              manifest: |-
                {
                  "enabled": true,
                  "name": "saml_integration",
                  "saml2_issuer": "test_issuer",
                  "saml2_provider": "CUSTOM",
                  "saml2_sso_url": "https://testsamlissuer.com",
                  "saml2_x509_cert": "MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiMD6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"
                }
        argumentDocs:
            created_on: (String) Date and time when the SAML integration was created.
            enabled: (Boolean) Specifies whether this security integration is enabled or disabled.
            id: (String) The ID of this resource.
            name: (String) Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
            saml2_digest_methods_used: (String)
            saml2_enable_sp_initiated: '(Boolean) The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.'
            saml2_force_authn: '(Boolean) The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.'
            saml2_issuer: (String) The string containing the IdP EntityID / Issuer.
            saml2_post_logout_redirect_url: (String) The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
            saml2_provider: '(String) The string describing the IdP. One of the following: OKTA, ADFS, Custom.'
            saml2_requested_nameid_format: '(String) The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .'
            saml2_sign_request: '(Boolean) The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.'
            saml2_signature_methods_used: (String)
            saml2_snowflake_acs_url: '(String) The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://<account_locator>..snowflakecomputing.com/fed/login'
            saml2_snowflake_issuer_url: (String) The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
            saml2_snowflake_metadata: (String) Metadata created by Snowflake to provide to SAML2 provider.
            saml2_snowflake_x509_cert: (String) The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.
            saml2_sp_initiated_login_page_label: (String) The string containing the label to display after the Log In With button on the login page.
            saml2_sso_url: (String) The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
            saml2_x509_cert: (String) The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
        importStatements:
            - terraform import snowflake_saml_integration.example name
    snowflake_schema:
        subCategory: ""
        name: snowflake_schema
        title: snowflake_schema Resource - terraform-provider-snowflake
        examples:
            - name: schema
              manifest: |-
                {
                  "comment": "A schema.",
                  "data_retention_days": 1,
                  "database": "database",
                  "is_managed": false,
                  "is_transient": false,
                  "name": "schema"
                }
        argumentDocs:
            comment: (String) Specifies a comment for the schema.
            data_retention_days: (Number) Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.
            database: (String) The database in which to create the schema.
            id: (String) The ID of this resource.
            is_managed: (Boolean) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.
            is_transient: (Boolean) Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
            name: (String) Specifies the identifier for the schema; must be unique for the database in which the schema is created.
            schema: (String) Name of the schema that the tag was created in.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - |-
              # format is dbName | schemaName
              terraform import snowflake_schema.example 'dbName|schemaName'
    snowflake_schema_grant:
        subCategory: ""
        name: snowflake_schema_grant
        title: snowflake_schema_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "USAGE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the schema on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true, apply this grant on all schemas in the given database. The schema_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true, apply this grant on all future schemas in the given database. The schema_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future schema. Note that if "OWNERSHIP" is specified, ensure that the role that terraform is using is granted access. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future and on_all are unset).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|privilege|with_grant_option|on_future|on_all|roles|shares
              terraform import snowflake_schema_grant.example "MY_DATABASE|MY_SCHEMA|USAGE|false|false|false|role1,role2|share1,share2"
    snowflake_scim_integration:
        subCategory: ""
        name: snowflake_scim_integration
        title: snowflake_scim_integration Resource - terraform-provider-snowflake
        examples:
            - name: aad
              manifest: |-
                {
                  "name": "AAD_PROVISIONING",
                  "network_policy": "AAD_NETWORK_POLICY",
                  "provisioner_role": "AAD_PROVISIONER",
                  "scim_client": "AZURE"
                }
        argumentDocs:
            created_on: (String) Date and time when the SCIM integration was created.
            id: (String) The ID of this resource.
            name: (String) Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
            network_policy: (String) Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.
            provisioner_role: (String) Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.
            scim_client: (String) Specifies the client type for the scim integration
        importStatements:
            - terraform import snowflake_scim_integration.example name
    snowflake_sequence:
        subCategory: ""
        name: snowflake_sequence
        title: snowflake_sequence Resource - terraform-provider-snowflake
        examples:
            - name: test_sequence
              manifest: |-
                {
                  "database": "${snowflake_database.test_database.name}",
                  "name": "thing_counter",
                  "schema": "${snowflake_schema.test_schema.name}"
                }
              references:
                database: snowflake_database.test_database.name
                schema: snowflake_schema.test_schema.name
              dependencies:
                snowflake_database.database: |-
                    {
                      "name": "things"
                    }
                snowflake_schema.test_schema: |-
                    {
                      "database": "${snowflake_database.test_database.name}",
                      "name": "things"
                    }
        argumentDocs:
            comment: (String) Specifies a comment for the sequence.
            database: (String) The database in which to create the sequence. Don't use the | character.
            fully_qualified_name: (String) The fully qualified name of the sequence.
            id: (String) The ID of this resource.
            increment: (Number) The amount the sequence will increase by each time it is used
            name: (String) Specifies the name for the sequence.
            next_value: (Number) The next value the sequence will provide.
            schema: (String) The schema in which to create the sequence. Don't use the | character.
        importStatements:
            - |-
              # format is database name | schema name | sequence name
              terraform import snowflake_sequence.example 'dbName|schemaName|sequenceName'
    snowflake_sequence_grant:
        subCategory: ""
        name: snowflake_sequence_grant
        title: snowflake_sequence_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "sequence_name": "sequence",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future sequences on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all sequences in the given schema. When this is true and no schema_name is provided apply this grant on all sequences in the given database. The sequence_name field must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future sequences in the given schema. When this is true and no schema_name is provided apply this grant on all future sequences in the given database. The sequence_name field must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future sequence. To grant all privileges, use the value ALL PRIVILEGES
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future sequences on which to grant privileges.
            sequence_name: (String) The name of the sequence on which to grant privileges immediately (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|sequence_name|privilege|with_grant_option|on_future|roles
              terraform import snowflake_sequence_grant.example "MY_DATABASE|MY_SCHEMA|MY_SEQUENCE|USAGE|false|false|role1,role2"
    snowflake_session_parameter:
        subCategory: ""
        name: snowflake_session_parameter
        title: snowflake_session_parameter Resource - terraform-provider-snowflake
        examples:
            - name: s
              manifest: |-
                {
                  "key": "AUTOCOMMIT",
                  "user": "TEST_USER",
                  "value": "false"
                }
            - name: s2
              manifest: |-
                {
                  "key": "BINARY_OUTPUT_FORMAT",
                  "on_account": true,
                  "value": "BASE64"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Name of session parameter. Valid values are those in session parameters.
            on_account: (Boolean) If true, the session parameter will be set on the account level.
            user: (String) The user to set the session parameter for. Required if on_account is false
            value: (String) Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
        importStatements:
            - terraform import snowflake_session_parameter.s <parameter_name>
    snowflake_share:
        subCategory: ""
        name: snowflake_share
        title: snowflake_share Resource - terraform-provider-snowflake
        examples:
            - name: test
              manifest: |-
                {
                  "accounts": [
                    "organizationName.accountName"
                  ],
                  "comment": "cool comment",
                  "name": "share_name"
                }
        argumentDocs:
            accounts: (List of String) A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization_name.account_name
            comment: (String) Specifies a comment for the managed account.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the share; must be unique for the account in which the share is created.
        importStatements:
            - terraform import snowflake_share.example name
    snowflake_stage:
        subCategory: ""
        name: snowflake_stage
        title: snowflake_stage Resource - terraform-provider-snowflake
        examples:
            - name: example_stage
              manifest: |-
                {
                  "credentials": "AWS_KEY_ID='${var.example_aws_key_id}' AWS_SECRET_KEY='${var.example_aws_secret_key}'",
                  "database": "EXAMPLE_DB",
                  "name": "EXAMPLE_STAGE",
                  "schema": "EXAMPLE_SCHEMA",
                  "url": "s3://com.example.bucket/prefix"
                }
              dependencies:
                snowflake_stage_grant.grant_example_stage: |-
                    {
                      "database_name": "${snowflake_stage.example_stage.database}",
                      "privilege": "OWNERSHIP",
                      "roles": [
                        "LOADER"
                      ],
                      "schema_name": "${snowflake_stage.example_stage.schema}",
                      "stage_name": "${snowflake_stage.example_stage.name}"
                    }
        argumentDocs:
            aws_external_id: (String)
            comment: (String) Specifies a comment for the stage.
            copy_options: (String) Specifies the copy options for the stage.
            credentials: (String, Sensitive) Specifies the credentials for the stage.
            database: (String) The database in which to create the stage.
            directory: (String) Specifies the directory settings for the stage.
            encryption: (String) Specifies the encryption settings for the stage.
            file_format: (String) Specifies the file format for the stage.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
            schema: (String) The schema in which to create the stage.
            snowflake_iam_user: (String)
            storage_integration: (String) Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            url: (String) Specifies the URL for the stage.
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - |-
              # format is database name | schema name | stage name
              terraform import snowflake_stage.example 'dbName|schemaName|stageName'
    snowflake_stage_grant:
        subCategory: ""
        name: snowflake_stage_grant
        title: snowflake_stage_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "USAGE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "stage_name": "stage",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current stage on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all stages in the given schema. When this is true and no schema_name is provided apply this grant on all stages in the given database. The stage_name field must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future stages in the given schema. When this is true and no schema_name is provided apply this grant on all future stages in the given database. The stage_name field must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the stage. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current stage on which to grant privileges.
            stage_name: (String) The name of the stage on which to grant privilege (only valid if on_future and on_all are false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|stage_name|privilege|with_grant_option|on_future|on_all|roles
              terraform import snowflake_stage_grant.example "MY_DATABASE|MY_SCHEMA|MY_STAGE|USAGE|false|false|false|role1,role2"
    snowflake_storage_integration:
        subCategory: ""
        name: snowflake_storage_integration
        title: snowflake_storage_integration Resource - terraform-provider-snowflake
        examples:
            - name: integration
              manifest: |-
                {
                  "comment": "A storage integration.",
                  "enabled": true,
                  "name": "storage",
                  "storage_aws_external_id": "...",
                  "storage_aws_iam_user_arn": "...",
                  "storage_aws_role_arn": "...",
                  "storage_provider": "S3",
                  "type": "EXTERNAL_STAGE"
                }
        argumentDocs:
            azure_consent_url: (String) The consent URL that is used to create an Azure Snowflake service principle inside your tenant.
            azure_multi_tenant_app_name: (String) This is the name of the Snowflake client application created for your account.
            azure_tenant_id: (String)
            comment: (String)
            created_on: (String) Date and time when the storage integration was created.
            enabled: (Boolean)
            id: (String) The ID of this resource.
            name: (String)
            storage_allowed_locations: (List of String) Explicitly limits external stages that use the integration to reference one or more storage locations.
            storage_aws_external_id: (String) The external ID that Snowflake will use when assuming the AWS role.
            storage_aws_iam_user_arn: (String) The Snowflake user that will attempt to assume the AWS role.
            storage_aws_object_acl: (String) "bucket-owner-full-control" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.
            storage_aws_role_arn: (String)
            storage_blocked_locations: (List of String) Explicitly prohibits external stages that use the integration from referencing one or more storage locations.
            storage_gcp_service_account: (String) This is the name of the Snowflake Google Service Account created for your account.
            storage_provider: (String)
            type: (String)
        importStatements:
            - terraform import snowflake_storage_integration.example name
    snowflake_stream:
        subCategory: ""
        name: snowflake_stream
        title: snowflake_stream Resource - terraform-provider-snowflake
        examples:
            - name: stream
              manifest: |-
                {
                  "append_only": false,
                  "comment": "A stream.",
                  "database": "database",
                  "insert_only": false,
                  "name": "stream",
                  "on_table": "table",
                  "owner": "role1",
                  "schema": "schema"
                }
        argumentDocs:
            append_only: (Boolean) Type of the stream that will be created.
            comment: (String) Specifies a comment for the stream.
            database: (String) The database in which to create the stream.
            id: (String) The ID of this resource.
            insert_only: (Boolean) Create an insert only stream type.
            name: (String) Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.
            on_stage: (String) Specifies an identifier for the stage the stream will monitor.
            on_table: (String) Specifies an identifier for the table the stream will monitor.
            on_view: (String) Specifies an identifier for the view the stream will monitor.
            owner: (String) Name of the role that owns the stream.
            schema: (String) The schema in which to create the stream.
            show_initial_rows: (Boolean) Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.
        importStatements:
            - |-
              # format is database name | schema name | stream name
              terraform import snowflake_stream.example 'dbName|schemaName|streamName'
    snowflake_stream_grant:
        subCategory: ""
        name: snowflake_stream_grant
        title: snowflake_stream_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "stream_name": "view",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future streams on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all streams in the given schema. When this is true and no schema_name is provided apply this grant on all streams in the given database. The stream_name field must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future streams in the given schema. When this is true and no schema_name is provided apply this grant on all future streams in the given database. The stream_name field must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future stream. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future streams on which to grant privileges.
            stream_name: (String) The name of the stream on which to grant privileges immediately (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|stream_name|privilege|with_grant_option|on_future|roles"
              terraform import snowflake_stream_grant.example "MY_DATABASE|MY_SCHEMA|MY_STREAM|SELECT|false|false|role1,role2"
    snowflake_table:
        subCategory: ""
        name: snowflake_table
        title: snowflake_table Resource - terraform-provider-snowflake
        examples:
            - name: table
              manifest: |-
                {
                  "change_tracking": false,
                  "cluster_by": [
                    "to_date(DATE)"
                  ],
                  "column": [
                    {
                      "default": [
                        {
                          "sequence": "${snowflake_sequence.sequence.fully_qualified_name}"
                        }
                      ],
                      "name": "id",
                      "nullable": true,
                      "type": "int"
                    },
                    {
                      "identity": [
                        {
                          "start_num": 1,
                          "step_num": 3
                        }
                      ],
                      "name": "identity",
                      "nullable": true,
                      "type": "NUMBER(38,0)"
                    },
                    {
                      "name": "data",
                      "nullable": false,
                      "type": "text"
                    },
                    {
                      "name": "DATE",
                      "type": "TIMESTAMP_NTZ(9)"
                    },
                    {
                      "comment": "extra data",
                      "name": "extra",
                      "type": "VARIANT"
                    }
                  ],
                  "comment": "A table.",
                  "data_retention_time_in_days": "${snowflake_schema.schema.data_retention_time_in_days}",
                  "database": "${snowflake_schema.schema.database}",
                  "name": "table",
                  "primary_key": [
                    {
                      "keys": [
                        "data"
                      ],
                      "name": "my_key"
                    }
                  ],
                  "schema": "${snowflake_schema.schema.name}"
                }
              references:
                column.default.sequence: snowflake_sequence.sequence.fully_qualified_name
                data_retention_time_in_days: snowflake_schema.schema.data_retention_time_in_days
                database: snowflake_schema.schema.database
                schema: snowflake_schema.schema.name
              dependencies:
                snowflake_schema.schema: |-
                    {
                      "data_retention_days": 1,
                      "database": "database",
                      "name": "schema"
                    }
                snowflake_sequence.sequence: |-
                    {
                      "database": "${snowflake_schema.schema.database}",
                      "name": "sequence",
                      "schema": "${snowflake_schema.schema.name}"
                    }
        argumentDocs:
            change_tracking: (Boolean) Specifies whether to enable change tracking on the table. Default false.
            cluster_by: (List of String) A list of one or more table columns/expressions to be used as clustering key(s) for the table
            column: '(Block List, Min: 1) Definitions of a column to create in the table. Minimum one required. (see below for nested schema)'
            comment: (String) Specifies a comment for the table.
            constant: (String) The default constant value for the column
            data_retention_days: (Number, Deprecated) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
            data_retention_time_in_days: (Number, Deprecated) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. Default value is 1, if you wish to inherit the parent schema setting then pass in the schema attribute to this argument.
            database: (String) The database in which to create the table.
            default: '(Block List, Max: 1) Defines the column default value; note due to limitations of Snowflake''s ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied (see below for nested schema)'
            expression: (String) The default expression value for the column
            id: (String) The ID of this resource.
            identity: '(Block List, Max: 1) Defines the identity start/step values for a column. Note Identity/default are mutually exclusive. (see below for nested schema)'
            keys: (List of String) Columns to use in primary key
            masking_policy: (String) Masking policy to apply on column
            name: (String) Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
            nullable: '(Boolean) Whether this column can contain null values. Note: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.'
            owner: (String) Name of the role that owns the table.
            primary_key: '(Block List, Max: 1, Deprecated) Definitions of primary key constraint to create on table (see below for nested schema)'
            qualified_name: (String) Qualified name of the table.
            schema: (String) The schema in which to create the table.
            sequence: (String) The default sequence to use for the column
            start_num: (Number) The number to start incrementing at.
            step_num: (Number) Step size to increment by.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            type: (String) Column type, e.g. VARIANT
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - |-
              # format is database name | schema name | table name
              terraform import snowflake_table.example 'databaseName|schemaName|tableName'
    snowflake_table_column_masking_policy_application:
        subCategory: ""
        description: Applies a masking policy to a table column.
        name: snowflake_table_column_masking_policy_application
        title: snowflake_table_column_masking_policy_application Resource - terraform-provider-snowflake
        examples:
            - name: application
              manifest: |-
                {
                  "column": "secret",
                  "masking_policy": "${snowflake_masking_policy.policy.qualified_name}",
                  "provider": "${snowflake.masking}",
                  "table": "${snowflake_table.table.qualified_name}"
                }
              references:
                masking_policy: snowflake_masking_policy.policy.qualified_name
                provider: snowflake.masking
                table: snowflake_table.table.qualified_name
              dependencies:
                snowflake_masking_policy.policy: |-
                    {
                      "database": "EXAMPLE_DB",
                      "masking_expression": "case when current_role() in ('ANALYST') then val else sha2(val, 512) end",
                      "name": "EXAMPLE_MASKING_POLICY",
                      "provider": "${snowflake.masking}",
                      "return_data_type": "VARCHAR",
                      "schema": "EXAMPLE_SCHEMA",
                      "value_data_type": "VARCHAR"
                    }
                snowflake_table.table: |-
                    {
                      "column": [
                        {
                          "name": "secret",
                          "type": "VARCHAR(16777216)"
                        }
                      ],
                      "database": "EXAMPLE_DB",
                      "lifecycle": [
                        {
                          "ignore_changes": [
                            "${column[0].masking_policy}"
                          ]
                        }
                      ],
                      "name": "table",
                      "schema": "EXAMPLE_SCHEMA"
                    }
        argumentDocs:
            column: (String) The column to apply the masking policy to.
            id: (String) The ID of this resource.
            masking_policy: (String) Fully qualified name (database.schema.policyname) of the policy to apply.
            table: (String) The fully qualified name (database.schema.table) of the table to apply the masking policy to.
        importStatements: []
    snowflake_table_constraint:
        subCategory: ""
        name: snowflake_table_constraint
        title: snowflake_table_constraint Resource - terraform-provider-snowflake
        examples:
            - name: primary_key
              manifest: |-
                {
                  "columns": [
                    "col1"
                  ],
                  "comment": "hello world",
                  "name": "myconstraint",
                  "table_id": "${snowflake_table.t.id}",
                  "type": "PRIMARY KEY"
                }
              references:
                table_id: snowflake_table.t.id
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "some_db"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "some_schema"
                    }
                snowflake_table.fk_t: |-
                    {
                      "column": [
                        {
                          "name": "fk_col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "fk_col2",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "fk_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col2",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col3",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "some_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
            - name: foreign_key
              manifest: |-
                {
                  "columns": [
                    "col2"
                  ],
                  "comment": "hello fk",
                  "deferrable": false,
                  "enforced": false,
                  "foreign_key_properties": [
                    {
                      "references": [
                        {
                          "columns": [
                            "fk_col1"
                          ],
                          "table_id": "${snowflake_table.fk_t.id}"
                        }
                      ]
                    }
                  ],
                  "initially": "IMMEDIATE",
                  "name": "myconstraintfk",
                  "table_id": "${snowflake_table.t.id}",
                  "type": "FOREIGN KEY"
                }
              references:
                foreign_key_properties.references.table_id: snowflake_table.fk_t.id
                table_id: snowflake_table.t.id
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "some_db"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "some_schema"
                    }
                snowflake_table.fk_t: |-
                    {
                      "column": [
                        {
                          "name": "fk_col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "fk_col2",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "fk_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col2",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col3",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "some_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
            - name: unique
              manifest: |-
                {
                  "columns": [
                    "col3"
                  ],
                  "comment": "hello unique",
                  "name": "unique",
                  "table_id": "${snowflake_table.t.id}",
                  "type": "UNIQUE"
                }
              references:
                table_id: snowflake_table.t.id
              dependencies:
                snowflake_database.d: |-
                    {
                      "name": "some_db"
                    }
                snowflake_schema.s: |-
                    {
                      "database": "${snowflake_database.d.name}",
                      "name": "some_schema"
                    }
                snowflake_table.fk_t: |-
                    {
                      "column": [
                        {
                          "name": "fk_col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "fk_col2",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "fk_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
                snowflake_table.t: |-
                    {
                      "column": [
                        {
                          "name": "col1",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col2",
                          "nullable": false,
                          "type": "text"
                        },
                        {
                          "name": "col3",
                          "nullable": false,
                          "type": "text"
                        }
                      ],
                      "database": "${snowflake_database.d.name}",
                      "name": "some_table",
                      "schema": "${snowflake_schema.s.name}"
                    }
        argumentDocs:
            columns: (List of String) Columns to use in constraint key
            comment: (String) Comment for the table constraint
            deferrable: (Boolean) Whether the constraint is deferrable
            enable: (Boolean) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.
            enforced: (Boolean) Whether the constraint is enforced
            foreign_key_properties: '(Block List, Max: 1) Additional properties when type is set to foreign key. Not applicable for primary/unique keys (see below for nested schema)'
            id: (String) The ID of this resource.
            initially: (String) Whether the constraint is initially deferred or immediate
            match: (String) The match type for the foreign key. Not applicable for primary/unique keys
            name: (String) Name of constraint
            on_delete: (String) Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
            on_update: (String) Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
            references: '(Block List, Max: 1) The table and columns that the foreign key references. Not applicable for primary/unique keys (see below for nested schema)'
            rely: (Boolean) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.
            table_id: '(String) Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "<db_name>"."<schema_name>"."<table_name>" or "<db_name>.<schema_name>.<table_name>" or "<db_name>|<schema_name>.<table_name>" (snowflake_table.my_table.id)'
            type: (String) Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', 'FOREIGN KEY', or 'NOT NULL'
            validate: (Boolean) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.
        importStatements:
            - terraform import snowflake_table_constraint.example 'myconstraintfk❄️FOREIGN KEY❄️test|test|table'
    snowflake_table_grant:
        subCategory: ""
        name: snowflake_table_grant
        title: snowflake_table_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1"
                  ],
                  "table_name": "table",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future tables on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all tables in the given schema. When this is true and no schema_name is provided apply this grant on all tables in the given database. The table_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future tables in the given schema. When this is true and no schema_name is provided apply this grant on all future tables in the given database. The table_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future table. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future tables on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future or on_all are unset).
            table_name: (String) The name of the table on which to grant privileges immediately (only valid if on_future or on_all are unset).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|table_name|privilege|with_grant_option|on_future|on_all|roles|shares
              terraform import snowflake_table_grant.example "MY_DATABASE|MY_SCHEMA|MY_TABLE|USAGE|false|false|false|role1,role2|share1,share2"
    snowflake_tag:
        subCategory: ""
        name: snowflake_tag
        title: snowflake_tag Resource - terraform-provider-snowflake
        examples:
            - name: tag
              manifest: |-
                {
                  "allowed_values": [
                    "finance",
                    "engineering"
                  ],
                  "database": "${snowflake_database.database.name}",
                  "name": "cost_center",
                  "schema": "${snowflake_schema.schema.name}"
                }
              references:
                database: snowflake_database.database.name
                schema: snowflake_schema.schema.name
              dependencies:
                snowflake_database.database: |-
                    {
                      "name": "database"
                    }
                snowflake_schema.schema: |-
                    {
                      "database": "${snowflake_database.database.name}",
                      "name": "schema"
                    }
        argumentDocs:
            allowed_values: (List of String) List of allowed values for the tag.
            comment: (String) Specifies a comment for the tag.
            database: (String) The database in which to create the tag.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the tag; must be unique for the database in which the tag is created.
            schema: (String) The schema in which to create the tag.
        importStatements:
            - |-
              # format is database name | schema name | tag name
              terraform import snowflake_tag.example 'dbName|schemaName|tagName'
    snowflake_tag_association:
        subCategory: ""
        name: snowflake_tag_association
        title: snowflake_tag_association Resource - terraform-provider-snowflake
        examples:
            - name: db_association
              manifest: |-
                {
                  "object_identifier": [
                    {
                      "name": "${snowflake_database.database.name}"
                    }
                  ],
                  "object_type": "DATABASE",
                  "tag_id": "${snowflake_tag.tag.id}",
                  "tag_value": "finance"
                }
              references:
                object_identifier.name: snowflake_database.database.name
                tag_id: snowflake_tag.tag.id
              dependencies:
                snowflake_database.database: |-
                    {
                      "name": "database"
                    }
                snowflake_schema.schema: |-
                    {
                      "database": "${snowflake_database.database.name}",
                      "name": "schema"
                    }
                snowflake_table.test: |-
                    {
                      "column": [
                        {
                          "name": "column1",
                          "type": "VARIANT"
                        },
                        {
                          "name": "column2",
                          "type": "VARCHAR(16)"
                        }
                      ],
                      "comment": "Terraform example table",
                      "database": "${snowflake_database.test.name}",
                      "name": "TABLE_NAME",
                      "schema": "${snowflake_schema.test.name}"
                    }
                snowflake_tag.tag: |-
                    {
                      "allowed_values": [
                        "finance",
                        "engineering"
                      ],
                      "database": "${snowflake_database.database.name}",
                      "name": "cost_center",
                      "schema": "${snowflake_schema.schema.name}"
                    }
            - name: table_association
              manifest: |-
                {
                  "object_identifier": [
                    {
                      "database": "${snowflake_database.test.name}",
                      "name": "${snowflake_table.test.name}",
                      "schema": "${snowflake_schema.test.name}"
                    }
                  ],
                  "object_type": "TABLE",
                  "tag_id": "${snowflake_tag.test.id}",
                  "tag_value": "engineering"
                }
              references:
                object_identifier.database: snowflake_database.test.name
                object_identifier.name: snowflake_table.test.name
                object_identifier.schema: snowflake_schema.test.name
                tag_id: snowflake_tag.test.id
              dependencies:
                snowflake_database.database: |-
                    {
                      "name": "database"
                    }
                snowflake_schema.schema: |-
                    {
                      "database": "${snowflake_database.database.name}",
                      "name": "schema"
                    }
                snowflake_table.test: |-
                    {
                      "column": [
                        {
                          "name": "column1",
                          "type": "VARIANT"
                        },
                        {
                          "name": "column2",
                          "type": "VARCHAR(16)"
                        }
                      ],
                      "comment": "Terraform example table",
                      "database": "${snowflake_database.test.name}",
                      "name": "TABLE_NAME",
                      "schema": "${snowflake_schema.test.name}"
                    }
                snowflake_tag.tag: |-
                    {
                      "allowed_values": [
                        "finance",
                        "engineering"
                      ],
                      "database": "${snowflake_database.database.name}",
                      "name": "cost_center",
                      "schema": "${snowflake_schema.schema.name}"
                    }
        argumentDocs:
            create: (String)
            database: (String) Name of the database that the object was created in.
            id: (String) The ID of this resource.
            name: (String) Name of the object to associate the tag with.
            object_identifier: '(Block List, Min: 1) Specifies the object identifier for the tag association. (see below for nested schema)'
            object_name: (String, Deprecated) Specifies the object identifier for the tag association.
            object_type: '(String) Specifies the type of object to add a tag to. ex: ''ACCOUNT'', ''COLUMN'', ''DATABASE'', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects'
            schema: (String) Name of the schema that the object was created in.
            skip_validation: (Boolean) If true, skips validation of the tag association.
            tag_id: '(String) Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)'
            tag_value: (String) Specifies the value of the tag, (e.g. 'finance' or 'engineering')
            timeouts: (Block, Optional) (see below for nested schema)
        importStatements:
            - |-
              # format is dbName.schemaName.tagName or dbName.schemaName.tagName
              terraform import snowflake_tag_association.example 'dbName.schemaName.tagName'
    snowflake_tag_grant:
        subCategory: ""
        name: snowflake_tag_grant
        title: snowflake_tag_grant Resource - terraform-provider-snowflake
        examples:
            - name: example
              manifest: |-
                {
                  "database_name": "database",
                  "privilege": "OWNERSHIP",
                  "roles": [
                    "TEST_ROLE"
                  ],
                  "schema_name": "schema",
                  "tag_name": "tag"
                }
        argumentDocs:
            database_name: (String) The name of the database containing the tag on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the tag. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the tag on which to grant privileges.
            tag_name: (String) The name of the tag on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database|schema|tag|privilege|with_grant_option|roles
              terraform import snowflake_tag_grant.example "MY_DATABASE|MY_SCHEMA|MY_TAG|USAGE|false|role1,role2"
    snowflake_tag_masking_policy_association:
        subCategory: ""
        description: Attach a masking policy to a tag. Requires a current warehouse to be set. Either with SNOWFLAKE_WAREHOUSE env variable or in current session. If no warehouse is provided, a temporary warehouse will be created.
        name: snowflake_tag_masking_policy_association
        title: snowflake_tag_masking_policy_association Resource - terraform-provider-snowflake
        examples:
            - name: name
              manifest: |-
                {
                  "masking_policy_id": "${snowflake_masking_policy.example_masking_policy.id}",
                  "tag_id": "${snowflake_tag.this.id}"
                }
              references:
                masking_policy_id: snowflake_masking_policy.example_masking_policy.id
                tag_id: snowflake_tag.this.id
              dependencies:
                snowflake_database.test: |-
                    {
                      "data_retention_time_in_days": 1,
                      "name": "TEST_DB1"
                    }
                snowflake_database.test2: |-
                    {
                      "data_retention_time_in_days": 1,
                      "name": "TEST_DB2"
                    }
                snowflake_masking_policy.example_masking_policy: |-
                    {
                      "database": "${snowflake_database.test.name}",
                      "masking_expression": "case when current_role() in ('ACCOUNTADMIN') then val else sha2(val, 512) end",
                      "name": "EXAMPLE_MASKING_POLICY",
                      "return_data_type": "string",
                      "schema": "${snowflake_schema.test.name}",
                      "value_data_type": "string"
                    }
                snowflake_schema.test: |-
                    {
                      "data_retention_days": "${snowflake_database.test.data_retention_time_in_days}",
                      "database": "${snowflake_database.test.name}",
                      "name": "FOOBAR"
                    }
                snowflake_schema.test2: |-
                    {
                      "data_retention_days": "${snowflake_database.test2.data_retention_time_in_days}",
                      "database": "${snowflake_database.test2.name}",
                      "name": "FOOBAR2"
                    }
                snowflake_tag.this: |-
                    {
                      "database": "${snowflake_database.test2.name}",
                      "name": "${upper(\"test_tag\")}",
                      "schema": "${snowflake_schema.test2.name}"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            masking_policy_id: (String) The resource id of the masking policy
            tag_id: '(String) Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)'
        importStatements:
            - |-
              # format is tag database name | tag schema name | tag name | masking policy database | masking policy schema | masking policy name
              terraform import snowflake_tag_masking_policy_association.example 'tag_db|tag_schema|tag_name|mp_db|mp_schema|mp_name'
    snowflake_task:
        subCategory: ""
        name: snowflake_task
        title: snowflake_task Resource - terraform-provider-snowflake
        examples:
            - name: task
              manifest: |-
                {
                  "after": "preceding_task",
                  "comment": "my task",
                  "database": "database",
                  "enabled": true,
                  "name": "task",
                  "schedule": "10 MINUTE",
                  "schema": "schema",
                  "session_parameters": {
                    "foo": "bar"
                  },
                  "sql_statement": "select * from foo;",
                  "user_task_timeout_ms": 10000,
                  "warehouse": "warehouse",
                  "when": "foo AND bar"
                }
            - name: serverless_task
              manifest: |-
                {
                  "after": [
                    "${snowflake_task.task.name}"
                  ],
                  "comment": "my serverless task",
                  "database": "db",
                  "enabled": true,
                  "name": "serverless_task",
                  "schedule": "10 MINUTE",
                  "schema": "schema",
                  "session_parameters": {
                    "foo": "bar"
                  },
                  "sql_statement": "select * from foo;",
                  "user_task_managed_initial_warehouse_size": "XSMALL",
                  "user_task_timeout_ms": 10000,
                  "when": "foo AND bar"
                }
            - name: test_task
              manifest: |-
                {
                  "allow_overlapping_execution": true,
                  "comment": "task with allow_overlapping_execution",
                  "database": "database",
                  "enabled": true,
                  "name": "test_task",
                  "schema": "schema",
                  "sql_statement": "select 1 as c;"
                }
        argumentDocs:
            after: (List of String) Specifies one or more predecessor tasks for the current task. Use this option to create a DAG of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies.
            allow_overlapping_execution: (Boolean) By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap.
            comment: (String) Specifies a comment for the task.
            database: (String) The database in which to create the task.
            enabled: (Boolean) Specifies if the task should be started (enabled) after creation or should remain suspended (default).
            error_integration: (String) Specifies the name of the notification integration used for error notifications.
            id: (String) The ID of this resource.
            name: (String) Specifies the identifier for the task; must be unique for the database and schema in which the task is created.
            schedule: (String) The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)
            schema: (String) The schema in which to create the task.
            session_parameters: (Map of String) Specifies session parameters to set for the session when the task runs. A task supports all session parameters.
            sql_statement: (String) Any single SQL statement, or a call to a stored procedure, executed when the task runs.
            suspend_task_after_num_failures: (Number) Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension).
            user_task_managed_initial_warehouse_size: (String) Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)
            user_task_timeout_ms: (Number) Specifies the time limit on a single run of the task before it times out (in milliseconds).
            warehouse: (String) The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user_task_managed_initial_warehouse_size)
            when: (String) Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.
        importStatements:
            - |-
              # format is database name | schema name | task name
              terraform import snowflake_task.example 'dbName|schemaName|taskName'
    snowflake_task_grant:
        subCategory: ""
        name: snowflake_task_grant
        title: snowflake_task_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "OPERATE",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "task_name": "task",
                  "with_grant_option": false
                }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future tasks on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all tasks in the given schema. When this is true and no schema_name is provided apply this grant on all tasks in the given database. The task_name field must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future tasks in the given schema. When this is true and no schema_name is provided apply this grant on all future tasks in the given database. The task_name field must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future task. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future tasks on which to grant privileges.
            task_name: (String) The name of the task on which to grant privileges immediately (only valid if on_future is false).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|task_name|privilege|with_grant_option|on_future|roles"
              terraform import snowflake_task_grant.example "MY_DATABASE|MY_SCHEMA|MY_TASK|OPERATE|false|false|role1,role2"
    snowflake_unsafe_execute:
        subCategory: ""
        description: Experimental resource used for testing purposes only. Allows to execute ANY SQL statement.
        name: snowflake_unsafe_execute
        title: snowflake_unsafe_execute Resource - terraform-provider-snowflake
        examples:
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "revert": "DROP DATABASE ABC"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE \"abc\"",
                  "revert": "DROP DATABASE \"abc\""
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "query": "SHOW DATABASES LIKE '%ABC%'",
                  "revert": "DROP DATABASE ABC"
                }
            - name: test
              manifest: |-
                {
                  "execute": "GRANT USAGE ON DATABASE ABC TO ROLE XYZ",
                  "revert": "REVOKE USAGE ON DATABASE ABC FROM ROLE XYZ"
                }
            - name: test
              manifest: |-
                {
                  "execute": "GRANT ${join(\",\", each.value.privileges)} ON DATABASE ${each.value.database_name} TO ROLE ${each.value.role_id}",
                  "for_each": "${{ for index, db_grant in var.database_grants : index =\u003e db_grant }}",
                  "revert": "REVOKE ${join(\",\", each.value.privileges)} ON DATABASE ${each.value.database_name} FROM ROLE ${each.value.role_id}"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "revert": "SELECT 1"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "revert": "DROP DATABASE ABC"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "revert": "SELECT 1"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE XYZ",
                  "revert": "SELECT 1"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "revert": "DROP DATABASE ABC"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE XYZ",
                  "revert": "DROP DATABASE XYZ"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "query": "bad query",
                  "revert": "DROP DATABASE ABC"
                }
            - name: test
              manifest: |-
                {
                  "execute": "CREATE DATABASE ABC",
                  "query": "SHOW DATABASES LIKE '%ABC%'",
                  "revert": "DROP DATABASE ABC"
                }
        argumentDocs:
            execute: (String) SQL statement to execute. Forces recreation of resource on change.
            id: (String) The ID of this resource.
            query: (String) Optional SQL statement to do a read. Invoked after creation and every time it is changed.
            query_results: (List of Map of String) List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.
            revert: (String) SQL statement to revert the execute statement. Invoked when resource is being destroyed.
        importStatements: []
    snowflake_user:
        subCategory: ""
        name: snowflake_user
        title: snowflake_user Resource - terraform-provider-snowflake
        examples:
            - name: user
              manifest: |-
                {
                  "comment": "A user of snowflake.",
                  "default_role": "role1",
                  "default_secondary_roles": [
                    "ALL"
                  ],
                  "default_warehouse": "warehouse",
                  "disabled": false,
                  "display_name": "Snowflake User",
                  "email": "user@snowflake.example",
                  "first_name": "Snowflake",
                  "last_name": "User",
                  "login_name": "snowflake_user",
                  "must_change_password": false,
                  "name": "Snowflake User",
                  "password": "secret",
                  "rsa_public_key": "...",
                  "rsa_public_key_2": "..."
                }
        argumentDocs:
            comment: (String)
            default_namespace: (String) Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
            default_role: (String) Specifies the role that is active by default for the user’s session upon login.
            default_secondary_roles: (Set of String) Specifies the set of secondary roles that are active for the user’s session upon login. Currently only ["ALL"] value is supported - more information can be found in doc
            default_warehouse: (String) Specifies the virtual warehouse that is active by default for the user’s session upon login.
            disabled: (Boolean)
            display_name: (String, Sensitive) Name displayed for the user in the Snowflake web interface.
            email: (String, Sensitive) Email address for the user.
            first_name: (String, Sensitive) First name of the user.
            has_rsa_public_key: (Boolean) Will be true if user as an RSA key set.
            id: (String) The ID of this resource.
            last_name: (String, Sensitive) Last name of the user.
            login_name: (String) The name users use to log in. If not supplied, snowflake will use name instead.
            must_change_password: (Boolean) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
            name: (String, Sensitive) Name of the user. Note that if you do not supply login_name this will be used as login_name. doc
            password: '(String, Sensitive) WARNING: this will put the password in the terraform state file. Use carefully.'
            rsa_public_key: (String) Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
            rsa_public_key_2: (String) Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        importStatements:
            - terraform import snowflake_user.example userName
    snowflake_user_grant:
        subCategory: ""
        name: snowflake_user_grant
        title: snowflake_user_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "privilege": "MONITOR",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "user_name": "user",
                  "with_grant_option": false
                }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the user. To grant all privileges, use the value ALL PRIVILEGES.
            roles: (Set of String) Grants privilege to these roles.
            user_name: (String) The name of the user on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is user_name|privilege|with_grant_option|roles
              terraform import snowflake_user_grant.example "USERNAME|MONITOR|false|role1,role2"
    snowflake_user_ownership_grant Resource - terraform-provider-snowflake:
        subCategory: ""
        name: snowflake_user_ownership_grant Resource - terraform-provider-snowflake
        title: snowflake_user_ownership_grant Resource - terraform-provider-snowflake
        argumentDocs:
            current_grants: (String) Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role.
            id: (String) The ID of this resource.
            on_user_name: (String) The name of the user ownership is granted on.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy.
            to_role_name: (String) The name of the role to grant ownership. Please ensure that the role that terraform is using is granted access.
        importStatements: []
    snowflake_user_public_keys Resource - terraform-provider-snowflake:
        subCategory: ""
        name: snowflake_user_public_keys Resource - terraform-provider-snowflake
        title: snowflake_user_public_keys Resource - terraform-provider-snowflake
        argumentDocs:
            id: (String) The ID of this resource.
            name: (String) Name of the user.
            rsa_public_key: (String) Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
            rsa_public_key_2: (String) Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
        importStatements: []
    snowflake_view:
        subCategory: ""
        name: snowflake_view
        title: snowflake_view Resource - terraform-provider-snowflake
        examples:
            - name: view
              manifest: |-
                {
                  "comment": "comment",
                  "database": "database",
                  "is_secure": false,
                  "name": "view",
                  "or_replace": false,
                  "schema": "schema",
                  "statement": "select * from foo;\n"
                }
        argumentDocs:
            comment: (String) Specifies a comment for the view.
            copy_grants: (Boolean) Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
            created_on: (String) The timestamp at which the view was created.
            database: (String) The database in which to create the view. Don't use the | character.
            id: (String) The ID of this resource.
            is_secure: (Boolean) Specifies that the view is secure.
            name: (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.
            or_replace: (Boolean) Overwrites the View if it exists.
            schema: (String) The schema in which to create the view. Don't use the | character.
            statement: (String) Specifies the query used to create the view.
            tag: (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
            value: (String) Tag value, e.g. marketing_info.
        importStatements:
            - |-
              # format is database name | schema name | view name
              terraform import snowflake_view.example 'dbName|schemaName|viewName'
    snowflake_view_grant:
        subCategory: ""
        name: snowflake_view_grant
        title: snowflake_view_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "database_name": "database",
                  "on_future": false,
                  "privilege": "SELECT",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "schema_name": "schema",
                  "shares": [
                    "share1",
                    "share2"
                  ],
                  "view_name": "view",
                  "with_grant_option": false
                }
              dependencies:
                snowflake_schema_grant.grant: |-
                    {
                      "database_name": "database",
                      "privilege": "USAGE",
                      "roles": [
                        "role1",
                        "role2"
                      ],
                      "schema_name": "schema"
                    }
        argumentDocs:
            database_name: (String) The name of the database containing the current or future views on which to grant privileges.
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            on_all: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all views in the given schema. When this is true and no schema_name is provided apply this grant on all views in the given database. The view_name and shares fields must be unset in order to use on_all. Cannot be used together with on_future.
            on_future: (Boolean) When this is set to true and a schema_name is provided, apply this grant on all future views in the given schema. When this is true and no schema_name is provided apply this grant on all future views in the given database. The view_name and shares fields must be unset in order to use on_future. Cannot be used together with on_all.
            privilege: (String) The privilege to grant on the current or future view. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            schema_name: (String) The name of the schema containing the current or future views on which to grant privileges.
            shares: (Set of String) Grants privilege to these shares (only valid if on_future and on_all are unset).
            view_name: (String) The name of the view on which to grant privileges immediately (only valid if on_future and on_all are unset).
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is database_name|schema_name|view_name|privilege|with_grant_option|on_future|on_all|roles|shares
              terraform import snowflake_view_grant.example "MY_DATABASE|MY_SCHEMA|MY_VIEW|USAGE|false|false|false|role1,role2|share1,share2"
    snowflake_warehouse:
        subCategory: ""
        name: snowflake_warehouse
        title: snowflake_warehouse Resource - terraform-provider-snowflake
        examples:
            - name: warehouse
              manifest: |-
                {
                  "comment": "foo",
                  "name": "test",
                  "warehouse_size": "small"
                }
        argumentDocs:
            auto_resume: (Boolean) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.
            auto_suspend: (Number) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
            comment: (String)
            enable_query_acceleration: (Boolean) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources.
            id: (String) The ID of this resource.
            initially_suspended: (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
            max_cluster_count: (Number) Specifies the maximum number of server clusters for the warehouse.
            max_concurrency_level: (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
            min_cluster_count: (Number) Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
            name: (String) Identifier for the virtual warehouse; must be unique for your account.
            query_acceleration_max_scale_factor: (Number) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
            resource_monitor: (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse.
            scaling_policy: (String) Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.
            statement_queued_timeout_in_seconds: (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
            statement_timeout_in_seconds: (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
            wait_for_provisioning: (Boolean, Deprecated) Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.
            warehouse_size: (String) Specifies the size of the virtual warehouse. Larger warehouse sizes 5X-Large and 6X-Large are currently in preview and only available on Amazon Web Services (AWS).
            warehouse_type: (String) Specifies a STANDARD or SNOWPARK-OPTIMIZED warehouse
        importStatements:
            - terraform import snowflake_warehouse.example warehouseName
    snowflake_warehouse_grant:
        subCategory: ""
        name: snowflake_warehouse_grant
        title: snowflake_warehouse_grant Resource - terraform-provider-snowflake
        examples:
            - name: grant
              manifest: |-
                {
                  "privilege": "MODIFY",
                  "roles": [
                    "role1",
                    "role2"
                  ],
                  "warehouse_name": "warehouse",
                  "with_grant_option": false
                }
        argumentDocs:
            enable_multiple_grants: (Boolean) When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke grants applied to roles and objects outside Terraform.
            id: (String) The ID of this resource.
            privilege: (String) The privilege to grant on the warehouse. To grant all privileges, use the value ALL PRIVILEGES.
            revert_ownership_to_role_name: (String) The name of the role to revert ownership to on destroy. Has no effect unless privilege is set to OWNERSHIP
            roles: (Set of String) Grants privilege to these roles.
            warehouse_name: (String) The name of the warehouse on which to grant privileges.
            with_grant_option: (Boolean) When this is set to true, allows the recipient role to grant the privileges to other roles.
        importStatements:
            - |-
              # format is warehouse_name|privilege|with_grant_option|roles
              terraform import snowflake_warehouse_grant.example "MY_WAREHOUSE|MODIFY|false|role1,role2"
